{
  "trello-mcp": {
    "description": "Trello MCP server for comprehensive project management, board operations, card management, team collaboration, and workflow automation via natural language.",
    "tools": [
      {
        "name": "TRELLO_ACTION_GET_BOARD_BY_ID_ACTION",
        "description": "Get board by action id. Retrieves details for the Trello board associated with a specific action ID. Args: id_action (str, required), fields (str, optional, default='all'). Returns: Dictionary containing success status, board data, and retrieval message.\", ) def TRELLO_ACTION_GET_BOARD_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to retrieve board information for.\"], fields: Annotated[Optional[str], \"Fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to retrieve board information for.",
          "fields": "str (optional) - Fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_ACTION_GET_BY_ID",
        "description": "Get action by ID. Retrieves detailed information about a specific Trello action by its ID. Args: id_action (str, required), display (str, optional), entities (str, optional), fields (str, optional, default='all'), member (str, optional), member_creator (str, optional), member_creator_fields (str, optional, default='avatarHash,fullName,initials,username'), member_fields (str, optional, default='avatarHash,fullName,initials,username'). Returns: Dictionary containing success status, action data, and retrieval message.\", ) def TRELLO_ACTION_GET_BY_ID( id_action: Annotated[str, \"The ID of the action to retrieve (required).\"], display: Annotated[Optional[str], \"Display format for the action.\"] = None, entities: Annotated[Optional[str], \"Entities to include in the response.\"] = None, fields: Annotated[Optional[str], \"Fields to return. Defaults to all.\"] = \"all\", member: Annotated[Optional[str], \"Member information to include.\"] = None, member_creator: Annotated[Optional[str], \"Member creator information to include.\"] = None, member_creator_fields: Annotated[Optional[str], \"Member creator fields to return. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[Optional[str], \"Member fields to return. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username",
        "parameters": {
          "id_action": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_ACTION_GET_LIST_BY_ID_ACTION",
        "description": "Get an action's list. Retrieves the Trello list associated with a specific action ID. Args: id_action (str, required), fields (str, optional, default='all'). Returns: Dictionary containing success status, list data, and retrieval message.\", ) def TRELLO_ACTION_GET_LIST_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to retrieve list information for.\"], fields: Annotated[Optional[str], \"Fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to retrieve list information for.",
          "fields": "str (optional) - Fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS",
        "description": "Add board. Creates a new Trello board with customizable preferences and settings. Args: name (str, required), desc (str, optional), closed (str, optional), id_organization (str, optional), id_board_source (str, optional), prefs_permission_level (str, optional), prefs_background (str, optional), prefs_comments (str, optional), prefs_voting (str, optional), prefs_invitations (str, optional), prefs_self_join (str, optional), label_names_blue (str, optional), label_names_green (str, optional), label_names_orange (str, optional), label_names_purple (str, optional), label_names_red (str, optional), label_names_yellow (str, optional), power_ups (str, optional), subscribed (str, optional). Returns: Dictionary containing success status, board data, board name, and creation message.\", ) def TRELLO_ADD_BOARDS( name: Annotated[str, \"The name of the board to create (required).\"], closed: Annotated[Optional[str], \"Whether the board is closed.\"] = None, desc: Annotated[Optional[str], \"Description of the board.\"] = None, id_board_source: Annotated[Optional[str], \"ID of the board to copy from.\"] = None, id_organization: Annotated[Optional[str], \"ID of the organization to add the board to.\"] = None, keep_from_source: Annotated[Optional[str], \"What to keep from the source board.\"] = None, label_names_blue: Annotated[Optional[str], \"Name for blue label.\"] = None, label_names_green: Annotated[Optional[str], \"Name for green label.\"] = None, label_names_orange: Annotated[Optional[str], \"Name for orange label.\"] = None, label_names_purple: Annotated[Optional[str], \"Name for purple label.\"] = None, label_names_red: Annotated[Optional[str], \"Name for red label.\"] = None, label_names_yellow: Annotated[Optional[str], \"Name for yellow label.\"] = None, power_ups: Annotated[Optional[str], \"Power-ups to enable.\"] = None, prefs_background: Annotated[Optional[str], \"Background preference.\"] = None, prefs_calendar_feed_enabled: Annotated[Optional[str], \"Whether calendar feed is enabled.\"] = None, prefs_card_aging: Annotated[Optional[str], \"Card aging preference.\"] = None, prefs_card_covers: Annotated[Optional[str], \"Card covers preference.\"] = None, prefs_comments: Annotated[Optional[str], \"Comments preference.\"] = None, prefs_invitations: Annotated[Optional[str], \"Invitations preference.\"] = None, prefs_permission_level: Annotated[Optional[str], \"Permission level preference.\"] = None, prefs_self_join: Annotated[Optional[str], \"Self-join preference.\"] = None, prefs_voting: Annotated[Optional[str], \"Voting preference.\"] = None, subscribed: Annotated[Optional[str], \"Whether the user is subscribed to the board.\"] = None ): \"\"\"Add board. Creates a new trello board; the 'name' parameter is required for creation, and various preferences can be customized or cloned from a source board.\"\"",
        "parameters": {
          "name": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_CALENDAR_KEY_GENERATE_BY_ID_BOARD",
        "description": "Get board calendar feed URL. Retrieves the calendar feed URL for the Trello board for calendar integration. Args: id_board (str, required). Returns: Dictionary containing success status, board info, calendar feed URL, and retrieval message.\", ) def TRELLO_ADD_BOARDS_CALENDAR_KEY_GENERATE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get calendar feed URL for.\"] ): \"\"\"Get board calendar feed URL. Retrieves the calendar feed URL for the trello board specified by `idboard` for calendar integration.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get calendar feed URL for."
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_EMAIL_KEY_GENERATE_BY_ID_BOARD",
        "description": "Generate email key for board. Generates an email key for the Trello board for email integration. Args: id_board (str, required). Returns: Dictionary containing success status, board info, email key, and generation message.\", ) def TRELLO_ADD_BOARDS_EMAIL_KEY_GENERATE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to generate an email key for.\"] ): \"\"\"Generate email key for board. Generates a new email key for the trello board specified by idboard to enable or reset adding cards via email; this invalidates any previously existing email key for the board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to generate an email key for."
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_LABELS_BY_ID_BOARD",
        "description": "Add label to board. Creates a new label on the Trello board with specified name and color. Args: id_board (str, required), name (str, required), color (str, optional). Returns: Dictionary containing success status, label data, and creation message.\", ) def TRELLO_ADD_BOARDS_LABELS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to add the label to.\"], name: Annotated[str, \"The name of the label to create.\"], color: Annotated[Optional[str], \"The color of the label (red, yellow, orange, green, blue, purple, pink, lime, sky, grey).\"] = None ): \"\"\"Add a label to a board. Creates a new label on an existing trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to add the label to.",
          "name": "str (required) - The name of the label to create.",
          "color": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_LISTS_BY_ID_BOARD",
        "description": "Add list to board. Creates a new list on the Trello board with specified name and position. Args: id_board (str, required), name (str, required), pos (str, optional), closed (str, optional), subscribed (str, optional). Returns: Dictionary containing success status, list data, and creation message.\", ) def TRELLO_ADD_BOARDS_LISTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to add the list to.\"], name: Annotated[str, \"The name of the list to create.\"], pos: Annotated[Optional[str], \"Position of the list (top, bottom, or a number).\"] = None ): \"\"\"Add new list to board. Creates a new, empty list on a specified, existing trello board, typically used as a column or category for organizing cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to add the list to.",
          "name": "str (required) - The name of the list to create.",
          "pos": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_MARK_AS_VIEWED_BY_ID_BOARD",
        "description": "Mark board as viewed. Marks the Trello board as viewed by the authenticated user. Args: id_board (str, required). Returns: Dictionary containing success status and view confirmation message.\", ) def TRELLO_ADD_BOARDS_MARK_AS_VIEWED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to mark as viewed.\"] ): \"\"\"Mark board as viewed. Marks the trello board specified by idboard as viewed for the current user, exclusively updating its viewed status and potentially influencing its position in user-specific lists and notification settings.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to mark as viewed."
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_CHECKLISTS_BY_ID_BOARD",
        "description": "Add checklist to board. Creates a new checklist on the Trello board with specified name and position. Args: id_board (str, required), name (str, optional). Returns: Dictionary containing success status, checklist data, and creation message.\", ) def TRELLO_ADD_BOARDS_CHECKLISTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to add the checklist to.\"], name: Annotated[Optional[str], \"The name of the checklist to create. If not provided, will use 'Checklist'.\"] = None ): \"\"\"Add checklist to board. Creates a new, initially empty checklist with a given name on an existing and accessible trello board by first creating a card and then adding the checklist to it.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to add the checklist to.",
          "name": "str (optional) - The name of the checklist to create. If not provided, will use 'Checklist'."
        }
      },
      {
        "name": "TRELLO_ADD_BOARDS_POWER_UPS_BY_ID_BOARD",
        "description": "Get board power-ups. Retrieves the power-ups available and enabled on the Trello board. Args: id_board (str, required). Returns: Dictionary containing success status, power-ups data, and retrieval message.\", ) def TRELLO_ADD_BOARDS_POWER_UPS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get power-ups for.\"] ): \"\"\"Get board power-ups. Retrieves the power-ups available and enabled on the trello board specified by idboard.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get power-ups for."
        }
      },
      {
        "name": "TRELLO_ADD_CARDS",
        "description": "Add card. Creates a new card in a Trello list with optional attributes like description, due date, members, and labels. Args: id_list (str, required), name (str, required), desc (str, optional), due (str, optional), due_complete (str, optional), id_members (str, optional), id_labels (str, optional), url_source (str, optional), pos (str, optional), subscribed (str, optional). Returns: Dictionary containing success status, card data, card ID, and creation message.\", ) def TRELLO_ADD_CARDS( id_list: Annotated[str, \"The ID of the list to add the card to (required).\"], name: Annotated[Optional[str], \"The name of the card.\"] = None, desc: Annotated[Optional[str], \"Description of the card.\"] = None, closed: Annotated[Optional[str], \"Whether the card is closed.\"] = None, due: Annotated[Optional[str], \"Due date for the card.\"] = None, file_source: Annotated[Optional[str], \"File source for the card.\"] = None, id_attachment_cover: Annotated[Optional[str], \"ID of attachment to use as cover.\"] = None, id_board: Annotated[Optional[str], \"ID of the board (if different from list's board).\"] = None, id_card_source: Annotated[Optional[str], \"ID of card to copy from.\"] = None, id_labels: Annotated[Optional[str], \"Comma-separated list of label IDs.\"] = None, id_members: Annotated[Optional[str], \"Comma-separated list of member IDs.\"] = None, keep_from_source: Annotated[Optional[str], \"What to keep from the source card.\"] = None, labels: Annotated[Optional[str], \"Comma-separated list of label names.\"] = None, pos: Annotated[Optional[str], \"Position of the card (top, bottom, or a number).\"] = None, subscribed: Annotated[Optional[str], \"Whether the user is subscribed to the card.\"] = None, url_source: Annotated[Optional[str], \"URL source for the card.\"] = None ): \"\"\"Add card. Creates a new card in a trello list; `idlist` is required, and if `idcardsource` is used, the source card must be accessible.\"\"",
        "parameters": {
          "id_list": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_CHECKLISTS_BY_ID_CARD",
        "description": "Add checklist to card via id. Adds a checklist to a trello card: use value to add a specific existing checklist, idchecklistsource to create a new checklist by copying an existing one (optionally using name for the new checklist's name), or name to create a new empty checklist from scratch.\", ) def TRELLO_ADD_CARDS_CHECKLISTS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add the checklist to.\"], value: Annotated[Optional[str], \"ID of an existing checklist to add to the card.\"] = None, id_checklist_source: Annotated[Optional[str], \"ID of an existing checklist to copy from.\"] = None, name: Annotated[Optional[str], \"Name for the new checklist (required when creating new or copying).\"] = None ): \"\"\"Add checklist to card via id. Adds a checklist to a trello card: use value to add a specific existing checklist, idchecklistsource to create a new checklist by copying an existing one (optionally using name for the new checklist's name), or name to create a new empty checklist from scratch.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add the checklist to.",
          "value": "str (optional) - ID of an existing checklist to add to the card.",
          "id_checklist_source": "str (optional) - ID of an existing checklist to copy from.",
          "name": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_ACTIONS_COMMENTS_BY_ID_CARD",
        "description": "Add comment to card. Adds a new text comment, which can include @mentions, to a trello card specified by its id; file attachments are not supported via this action.\", ) def TRELLO_ADD_CARDS_ACTIONS_COMMENTS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add the comment to.\"], text: Annotated[str, \"The text content of the comment to add.\"] ): \"\"\"Add comment to card. Adds a new text comment, which can include @mentions, to a trello card specified by its id; file attachments are not supported via this action.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add the comment to.",
          "text": "str (required) - The text content of the comment to add."
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_CHECKLIST_CHECK_ITEM_BY_ID_CARD_BY_ID_CHECKLIST",
        "description": "Add check item to checklist. Adds a new check item to an existing checklist on a specific trello card.\", ) def TRELLO_ADD_CARDS_CHECKLIST_CHECK_ITEM_BY_ID_CARD_BY_ID_CHECKLIST( id_card: Annotated[str, \"The ID of the card containing the checklist.\"], id_checklist: Annotated[str, \"The ID of the checklist to add the check item to.\"], name: Annotated[str, \"The name/text of the check item to add.\"], pos: Annotated[Optional[str], \"Position of the check item (top, bottom, or a number).\"] = None ): \"\"\"Add check item to checklist. Adds a new check item to an existing checklist on a specific trello card.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist.",
          "id_checklist": "str (required) - The ID of the checklist to add the check item to.",
          "name": "str (required) - The name/text of the check item to add.",
          "pos": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_ID_LABELS_BY_ID_CARD",
        "description": "Add label to card. Adds an existing label to a trello card; idcard identifies the card and value is the id of the label to add. both card and label must already exist.\", ) def TRELLO_ADD_CARDS_ID_LABELS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add the label to.\"], value: Annotated[str, \"The ID of the existing label to add to the card.\"] ): \"\"\"Add label to card. Adds an existing label to a trello card; idcard identifies the card and value is the id of the label to add. both card and label must already exist.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add the label to.",
          "value": "str (required) - The ID of the existing label to add to the card."
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_ID_MEMBERS_BY_ID_CARD",
        "description": "Add card member by id. Assigns a trello member to a specific trello card by card id (or short link) and member id.\", ) def TRELLO_ADD_CARDS_ID_MEMBERS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to assign the member to.\"], value: Annotated[str, \"The ID of the member to assign to the card.\"] ): \"\"\"Add card member by id. Assigns a trello member to a specific trello card by card id (or short link) and member id.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to assign the member to.",
          "value": "str (required) - The ID of the member to assign to the card."
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_LABELS_BY_ID_CARD",
        "description": "Add labels to card. Adds a label to an existing trello card (specified by idcard), defining the label by name and either color or the overriding value (which specifies color by name); a new label is created on the board if a matching one (by name/color combination) doesn't already exist.\", ) def TRELLO_ADD_CARDS_LABELS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add the label to.\"], name: Annotated[str, \"The name of the label to add.\"], color: Annotated[Optional[str], \"The color of the label (red, yellow, orange, green, blue, purple, pink, lime, sky, grey).\"] = None, value: Annotated[Optional[str], \"Override color by name (red, yellow, orange, green, blue, purple, pink, lime, sky, grey).\"] = None ): \"\"\"Add labels to card. Adds a label to an existing trello card (specified by idcard), defining the label by name and either color or the overriding value (which specifies color by name); a new label is created on the board if a matching one (by name/color combination) doesn't already exist.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add the label to.",
          "name": "str (required) - The name of the label to add.",
          "color": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_STICKERS_BY_ID_CARD",
        "description": "Add sticker to card. Adds a sticker to a trello card, using a default sticker name (e.g., 'taco-cool') or a custom sticker id for the image, and allows specifying its position, rotation, and z-index.\", ) def TRELLO_ADD_CARDS_STICKERS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add the sticker to.\"], image: Annotated[str, \"The sticker image name (e.g., 'taco-cool') or custom sticker ID.\"], left: Annotated[Optional[str], \"Left position of the sticker on the card.\"] = None, top: Annotated[Optional[str], \"Top position of the sticker on the card.\"] = None, rotate: Annotated[Optional[str], \"Rotation angle of the sticker in degrees.\"] = None, z_index: Annotated[Optional[str], \"Z-index (layer order) of the sticker.\"] = None ): \"\"\"Add sticker to card. Adds a sticker to a trello card, using a default sticker name (e.g., 'taco-cool') or a custom sticker id for the image, and allows specifying its position, rotation, and z-index.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add the sticker to.",
          "image": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CARDS_MEMBERS_VOTED_BY_ID_CARD",
        "description": "Casts a 'yes' vote for a specified member on a trello card; a member can only vote once per card.",
        "parameters": {
          "idCard": "str (required) - The ID of the card to add the vote to.",
          "value": "str (required) - The ID of the member whose vote to add."
        }
      },
      {
        "name": "TRELLO_ADD_CHECKLISTS",
        "description": "Add checklist to card. Creates a new checklist on a Trello card or board. Args: id_card (str, optional), id_board (str, optional), name (str, optional), id_checklist_source (str, optional), pos (str, optional). Returns: Dictionary containing success status, checklist data, and creation message.\", ) def TRELLO_ADD_CHECKLISTS( id_card: Annotated[Optional[str], \"The ID of the card to add the checklist to.\"] = None, id_board: Annotated[Optional[str], \"The ID of the board to add the checklist to.\"] = None, name: Annotated[Optional[str], \"The name of the new checklist to create.\"] = None, id_checklist_source: Annotated[Optional[str], \"The ID of an existing checklist to copy from.\"] = None, pos: Annotated[Optional[str], \"Position of the checklist (top, bottom, or a number).\"] = None ): \"\"\"Add checklist to card. Creates a new checklist on a trello card, either by name or by copying from idchecklistsource, targeting an idcard or idboard; this action creates only the checklist structure, not its items.\"\"",
        "parameters": {
          "id_card": "str (optional) - The ID of the card to add the checklist to.",
          "id_board": "str (optional) - The ID of the board to add the checklist to.",
          "name": "str (optional) - The name of the new checklist to create.",
          "id_checklist_source": "str (optional) - The ID of an existing checklist to copy from.",
          "pos": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_CHECKLISTS_CHECK_ITEMS_BY_ID_CHECKLIST",
        "description": "Add check item to checklist. Adds a new check item to a specified trello checklist; this action does not update existing check items.\", ) def TRELLO_ADD_CHECKLISTS_CHECK_ITEMS_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to add the check item to.\"], name: Annotated[str, \"The name/text of the check item to add.\"], checked: Annotated[Optional[str], \"Whether the check item should be checked (true/false).\"] = None, pos: Annotated[Optional[str], \"Position of the check item (top, bottom, or a number).\"] = None ): \"\"\"Add check item to checklist. Adds a new check item to a specified trello checklist; this action does not update existing check items.\"\"",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to add the check item to.",
          "name": "str (required) - The name/text of the check item to add.",
          "checked": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_LABELS",
        "description": "Create label on board. Creates a new label with a specified name (required) and color on a trello board (idboard required); this action defines the label but does not apply it to cards.\", ) def TRELLO_ADD_LABELS( id_board: Annotated[str, \"The ID of the board to create the label on.\"], name: Annotated[str, \"The name of the label to create.\"], color: Annotated[Optional[str], \"The color of the label (red, yellow, orange, green, blue, purple, pink, lime, sky, grey).\"] = None ): \"\"\"Create label on board. Creates a new label with a specified name (required) and color on a trello board (idboard required); this action defines the label but does not apply it to cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to create the label on.",
          "name": "str (required) - The name of the label to create.",
          "color": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_LISTS",
        "description": "Add new list to board. Creates a new list on a Trello board with options to copy from existing list. Args: id_board (str, required), name (str, required), id_list_source (str, optional), pos (str, optional), subscribed (str, optional). Returns: Dictionary containing success status, list data, and creation message.\", ) def TRELLO_ADD_LISTS( id_board: Annotated[str, \"The ID of the board to create the list on.\"], name: Annotated[str, \"The name of the list to create.\"], id_list_source: Annotated[Optional[str], \"The ID of an existing list to copy from.\"] = None, pos: Annotated[Optional[str], \"Position of the list (top, bottom, or a number).\"] = None, closed: Annotated[Optional[str], \"Whether the list should be closed/archived (true/false).\"] = None, subscribed: Annotated[Optional[str], \"Whether the user should be subscribed to the list (true/false).\"] = None ): \"\"\"Add new list to board. Creates a new list on a specified trello board, with options to copy an existing list, set its position, initial state (archived/subscribed), and does not modify existing lists or move cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to create the list on.",
          "name": "str (required) - The name of the list to create.",
          "id_list_source": "str (optional) - The ID of an existing list to copy from.",
          "pos": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_LIST_CREATE_LIST",
        "description": "Add new list to board. Deprecated: use 'add lists' instead. creates a new list on a trello board, optionally copying an existing list, setting position, and initial state; does not modify existing lists or move cards.\", ) def TRELLO_LIST_CREATE_LIST( id_board: Annotated[str, \"The ID of the board to create the list on.\"], name: Annotated[str, \"The name of the list to create.\"], id_list_source: Annotated[Optional[str], \"The ID of an existing list to copy from.\"] = None, pos: Annotated[Optional[str], \"Position of the list (top, bottom, or a number).\"] = None, closed: Annotated[Optional[str], \"Whether the list should be closed/archived (true/false).\"] = None, subscribed: Annotated[Optional[str], \"Whether the user should be subscribed to the list (true/false).\"] = None ): \"\"\"Add new list to board. Deprecated: use 'add lists' instead. creates a new list on a trello board, optionally copying an existing list, setting position, and initial state; does not modify existing lists or move cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to create the list on.",
          "name": "str (required) - The name of the list to create.",
          "id_list_source": "str (optional) - The ID of an existing list to copy from.",
          "pos": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_ADD_LISTS_ARCHIVE_ALL_CARDS_BY_ID_LIST",
        "description": "Archive all cards in list. Archives all cards in a trello list; while cards can be restored via the trello interface, this action does not provide an unarchive function.\", ) def TRELLO_ADD_LISTS_ARCHIVE_ALL_CARDS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to archive all cards from.\"] ): \"\"\"Archive all cards in list. Archives all cards in a trello list; while cards can be restored via the trello interface, this action does not provide an unarchive function.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to archive all cards from."
        }
      },
      {
        "name": "TRELLO_ADD_LISTS_CARDS_BY_ID_LIST",
        "description": "Add card to list. Creates a new card in a trello list, which must be specified by an existing and accessible idlist.\", ) def TRELLO_ADD_LISTS_CARDS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to add the card to.\"], name: Annotated[Optional[str], \"The name of the card to create.\"] = None, desc: Annotated[Optional[str], \"Description of the card.\"] = None, due: Annotated[Optional[str], \"Due date for the card.\"] = None, id_members: Annotated[Optional[str], \"Comma-separated list of member IDs to assign to the card.\"] = None, labels: Annotated[Optional[str], \"Comma-separated list of label names or IDs to add to the card.\"] = None ): \"\"\"Add card to list. Creates a new card in a trello list, which must be specified by an existing and accessible idlist.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to add the card to.",
          "name": "str (optional) - The name of the card to create.",
          "desc": "str (optional) - Description of the card.",
          "due": "str (optional) - Due date for the card.",
          "id_members": "str (optional) - Comma-separated list of member IDs to assign to the card.",
          "labels": "str (optional) - Comma-separated list of label names or IDs to add to the card."
        }
      },
      {
        "name": "TRELLO_ADD_LISTS_MOVE_ALL_CARDS_BY_ID_LIST",
        "description": "Move all cards in list to board. Moves all cards from a trello list to a different board; this action is irreversible, moves (not copies) cards, and empties the source list without deleting it.\", ) def TRELLO_ADD_LISTS_MOVE_ALL_CARDS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to move all cards from.\"], id_board: Annotated[str, \"The ID of the destination board to move cards to.\"] ): \"\"\"Move all cards in list to board. Moves all cards from a trello list to a different board; this action is irreversible, moves (not copies) cards, and empties the source list without deleting it.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to move all cards from.",
          "id_board": "str (required) - The ID of the destination board to move cards to."
        }
      },
      {
        "name": "TRELLO_ADD_MEMBERS_BOARD_STARS_BY_ID_MEMBER",
        "description": "Add board star to member. Stars a trello board for a member (does not remove or list stars), optionally at a specified position; the board must exist and be accessible to the member.\", ) def TRELLO_ADD_MEMBERS_BOARD_STARS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to star the board for.\"], id_board: Annotated[str, \"The ID of the board to star.\"], pos: Annotated[str, \"Optional position for the starred board.\"] = None ): \"\"\"Add board star to member. Stars a trello board for a member (does not remove or list stars), optionally at a specified position; the board must exist and be accessible to the member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to star the board for.",
          "id_board": "str (required) - The ID of the board to star.",
          "pos": "str (required) - Optional position for the starred board."
        }
      },
      {
        "name": "TRELLO_TRELLO_UPDATE_MEMBER_BOARD_STAR",
        "description": "Update Member Board Star. Updates an existing board star for a member, allowing changes to the target board (must be a valid, accessible board id if specified) or the star's position.\", ) def TRELLO_TRELLO_UPDATE_MEMBER_BOARD_STAR( id_member: Annotated[str, \"The ID of the member who owns the board star.\"], id_board_star: Annotated[str, \"The ID of the board star to update.\"], id_board: Annotated[str | None, \"The ID of the new target board (must be a valid, accessible board id if specified).\"] = None, pos: Annotated[str | None, \"The new position for the board star.\"] = None ): \"\"\"Update Member Board Star. Updates an existing board star for a member, allowing changes to the target board (must be a valid, accessible board id if specified) or the star's position.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the board star.",
          "id_board_star": "str (required) - The ID of the board star to update.",
          "id_board": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_ADD_MEMBERS_SAVED_SEARCHES_BY_ID_MEMBER",
        "description": "Add saved search for member. Creates a new saved search with a specified name, position, and query for a trello member.\", ) def TRELLO_ADD_MEMBERS_SAVED_SEARCHES_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to create the saved search for.\"], name: Annotated[str, \"The name of the saved search.\"], pos: Annotated[str, \"The position of the saved search.\"], query: Annotated[str, \"The search query for the saved search.\"] ): \"\"\"Add saved search for member. Creates a new saved search with a specified name, position, and query for a trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to create the saved search for.",
          "name": "str (required) - The name of the saved search.",
          "pos": "str (required) - The position of the saved search.",
          "query": "str (required) - The search query for the saved search."
        }
      },
      {
        "name": "TRELLO_ADD_NOTIFICATIONS_ALL_READ",
        "description": "Mark all notifications as read. Marks all trello notifications for the authenticated user as read across all boards; this action is permanent and cannot be undone.\", ) def TRELLO_ADD_NOTIFICATIONS_ALL_READ(): \"\"\"Mark all notifications as read. Marks all trello notifications for the authenticated user as read across all boards; this action is permanent and cannot be undone.\"\"",
        "parameters": {}
      },
      {
        "name": "TRELLO_MARK_CARD_NOTIFICATIONS_READ",
        "description": "Mark card notifications read. Marks all notifications associated with a specific trello card as read; this is irreversible and only affects read status, not deleting or modifying notifications. Note: This uses a workaround since Trello API doesn't have a direct card-specific endpoint.\", ) def TRELLO_MARK_CARD_NOTIFICATIONS_READ( id_card: Annotated[str, \"The ID of the card to mark notifications as read for.\"] ): \"\"\"Mark card notifications read. Marks all notifications associated with a specific trello card as read; this is irreversible and only affects read status, not deleting or modifying notifications. Note: This uses a workaround since Trello API doesn't have a direct card-specific endpoint.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to mark notifications as read for."
        }
      },
      {
        "name": "TRELLO_ADD_ORGANIZATIONS",
        "description": "Create organization. Creates a new trello organization (workspace) with a displayname (required), and optionally a description, website, and various preferences (e.g., board visibility, member invitation restrictions).\", ) def TRELLO_ADD_ORGANIZATIONS( display_name: Annotated[str, \"The display name of the organization (required).\"], desc: Annotated[Optional[str], \"Description of the organization.\"] = None, name: Annotated[Optional[str], \"The name of the organization.\"] = None, website: Annotated[Optional[str], \"Website URL of the organization.\"] = None, prefs__associated_domain: Annotated[Optional[str], \"Associated domain for the organization.\"] = None, prefs__board_visibility_restrict__org: Annotated[Optional[str], \"Restrict board visibility to organization members.\"] = None, prefs__board_visibility_restrict__private: Annotated[Optional[str], \"Restrict private board visibility.\"] = None, prefs__board_visibility_restrict__public: Annotated[Optional[str], \"Restrict public board visibility.\"] = None, prefs__external_members_disabled: Annotated[Optional[str], \"Disable external members.\"] = None, prefs__google_apps_version: Annotated[Optional[str], \"Google Apps version.\"] = None, prefs__org_invite_restrict: Annotated[Optional[str], \"Organization invite restrictions.\"] = None, prefs__permission_level: Annotated[Optional[str], \"Permission level for the organization.\"] = None ): \"\"\"Create organization. Creates a new trello organization (workspace) with a displayname (required), and optionally a description, website, and various preferences (e.g., board visibility, member invitation restrictions).\"\"",
        "parameters": {
          "display_name": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_ADD_TOKENS_WEBHOOKS_BY_TOKEN",
        "description": "Add token webhook. Creates a webhook for a trello token to monitor a trello model (idmodel) and send notifications to a callbackurl, which must be publicly accessible and able to respond to trello's head validation request.\", ) def TRELLO_ADD_TOKENS_WEBHOOKS_BY_TOKEN( callback_url: Annotated[str, \"The callback URL where Trello will send webhook notifications. Must be publicly accessible.\"], id_model: Annotated[str, \"The ID of the Trello model (board, card, etc.) to monitor.\"], description: Annotated[str, \"Description of the webhook.\"] = \"",
        "parameters": {
          "callback_url": "str (required) - The callback URL where Trello will send webhook notifications. Must be publicly accessible.",
          "id_model": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_BOARD_CREATE_BOARD",
        "description": "Add board. <<deprecated: this action is deprecated. please use 'add boards' instead.>> creates a new trello board, requiring the 'name' parameter.\", ) def TRELLO_BOARD_CREATE_BOARD( name: Annotated[str, \"The name of the board (required).\"], desc: Annotated[str, \"Description of the board.\"] = None, closed: Annotated[str, \"Whether the board is closed.\"] = None, id_board_source: Annotated[str, \"ID of a board to copy from.\"] = None, id_organization: Annotated[str, \"ID of the organization to add the board to.\"] = None, keep_from_source: Annotated[str, \"What to keep from the source board.\"] = None, subscribed: Annotated[str, \"Whether the user is subscribed to the board.\"] = None, power_ups: Annotated[str, \"Power-ups to enable on the board.\"] = None, # Label names label_names__blue: Annotated[str, \"Name for blue label.\"] = None, label_names__green: Annotated[str, \"Name for green label.\"] = None, label_names__orange: Annotated[str, \"Name for orange label.\"] = None, label_names__purple: Annotated[str, \"Name for purple label.\"] = None, label_names__red: Annotated[str, \"Name for red label.\"] = None, label_names__yellow: Annotated[str, \"Name for yellow label.\"] = None, # Preferences (new format) prefs__background: Annotated[str, \"Background preference for the board.\"] = None, prefs__calendar_feed_enabled: Annotated[str, \"Whether calendar feed is enabled.\"] = None, prefs__card_aging: Annotated[str, \"Card aging preference.\"] = None, prefs__card_covers: Annotated[str, \"Card covers preference.\"] = None, prefs__comments: Annotated[str, \"Comments preference.\"] = None, prefs__invitations: Annotated[str, \"Invitations preference.\"] = None, prefs__permission_level: Annotated[str, \"Permission level for the board.\"] = None, prefs__self_join: Annotated[str, \"Self-join preference.\"] = None, prefs__voting: Annotated[str, \"Voting preference.\"] = None, # Preferences (old format) prefs_background: Annotated[str, \"Background preference (old format).\"] = None, prefs_card_aging: Annotated[str, \"Card aging preference (old format).\"] = None, prefs_card_covers: Annotated[str, \"Card covers preference (old format).\"] = None, prefs_comments: Annotated[str, \"Comments preference (old format).\"] = None, prefs_invitations: Annotated[str, \"Invitations preference (old format).\"] = None, prefs_permission_level: Annotated[str, \"Permission level (old format).\"] = None, prefs_self_join: Annotated[str, \"Self-join preference (old format).\"] = None, prefs_voting: Annotated[str, \"Voting preference (old format).\"] = None ): \"\"\"Add board. <<deprecated: this action is deprecated. please use 'add boards' instead.>> creates a new trello board, requiring the 'name' parameter.\"\"",
        "parameters": {
          "name": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_BOARD_FILTER_CARDS_BY_ID_BOARD",
        "description": "Get cards by filter from board. Deprecated: use `get boards cards by id board by filter`. retrieves cards from a trello board using a filter.\", ) def TRELLO_BOARD_FILTER_CARDS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get cards from.\"], filter: Annotated[str, \"The filter to apply when retrieving cards.\"] ): \"\"\"Get cards by filter from board. Deprecated: use `get boards cards by id board by filter`. retrieves cards from a trello board using a filter.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get cards from.",
          "filter": "str (required) - The filter to apply when retrieving cards."
        }
      },
      {
        "name": "TRELLO_BOARD_GET_LISTS_BY_ID_BOARD",
        "description": "Get board's lists. Deprecated: retrieves lists from a specified trello board; use `get boards lists by id board`.\", ) def TRELLO_BOARD_GET_LISTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get lists from.\"], fields: Annotated[str, \"Fields to return. Defaults to all.\"] = \"\", filter: Annotated[str, \"Filter for lists. Defaults to open.\"] = \"\", cards: Annotated[str, \"Cards to include. Defaults to none.\"] = \"\", card_fields: Annotated[str, \"Card fields to return. Defaults to all.\"] = \"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get lists from.",
          "fields": "str (required) - Fields to return. Defaults to all.",
          "filter": "str (required) - Filter for lists. Defaults to open.",
          "cards": "str (required) - Cards to include. Defaults to none.",
          "card_fields": "str (required) - Card fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_CARD_GET_BY_ID_FIELD",
        "description": "Get card field by id. (deprecated: use `get cards by id card by field` instead) retrieves the value of a single, specified field from a trello card. Use 'all' to get all fields.\", ) def TRELLO_CARD_GET_BY_ID_FIELD( id_card: Annotated[str, \"The ID of the card to get the field from.\"], field: Annotated[str, \"The field name to retrieve from the card. Use 'all' to get all fields.\"] ): \"\"\"Get card field by id. (deprecated: use `get cards by id card by field` instead) retrieves the value of a single, specified field from a trello card. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get the field from.",
          "field": "str (required) - The field name to retrieve from the card. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_CARD_UPDATE_ID_LIST_BY_ID_CARD",
        "description": "Update card list ID. Deprecated: moves a trello card to a different list on the same board. use `update cards id list by id card` instead.\", ) def TRELLO_CARD_UPDATE_ID_LIST_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to move.\"], value: Annotated[str, \"The ID of the destination list to move the card to.\"] ): \"\"\"Update card list ID. Deprecated: moves a trello card to a different list on the same board. use `update cards id list by id card` instead.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to move.",
          "value": "str (required) - The ID of the destination list to move the card to."
        }
      },
      {
        "name": "TRELLO_CARD_UPDATE_POS_BY_ID_CARD",
        "description": "Update card position. Updates a trello card's position within its list to 'top', 'bottom', or a specified 1-indexed positive integer.<<DEPRECATED use update_cards_pos_by_id_card>>\", ) def TRELLO_CARD_UPDATE_POS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update position for.\"], value: Annotated[str, \"The position value: 'top', 'bottom', or a 1-indexed positive integer.\"] ): \"\"\"Update card position. Updates a trello card's position within its list to 'top', 'bottom', or a specified 1-indexed positive integer.<<DEPRECATED use update_cards_pos_by_id_card>>\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update position for.",
          "value": "str (required) - The position value: 'top', 'bottom', or a 1-indexed positive integer."
        }
      },
      {
        "name": "TRELLO_CONVERT_CHECKLIST_ITEM_TO_CARD",
        "description": "Convert checklist item to card. Converts a checklist item into a new card (useful for promoting a subtask), which inherits some properties from the item; this is irreversible via the api and offers no customization during conversion.\", ) def TRELLO_CONVERT_CHECKLIST_ITEM_TO_CARD( id_card: Annotated[str, \"The ID of the card containing the checklist.\"], id_checklist: Annotated[str, \"The ID of the checklist containing the item.\"], id_check_item: Annotated[str, \"The ID of the checklist item to convert to a card.\"] ): \"\"\"Convert checklist item to card. Converts a checklist item into a new card (useful for promoting a subtask), which inherits some properties from the item; this is irreversible via the api and offers no customization during conversion.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist.",
          "id_checklist": "str (required) - The ID of the checklist containing the item.",
          "id_check_item": "str (required) - The ID of the checklist item to convert to a card."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_BOARD_BY_ID_ACTION",
        "description": "Get board by action id. Retrieves details for the trello board associated with a specific action id, returning board information only.\", ) def TRELLO_GET_ACTIONS_BOARD_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the board for.\"], fields: Annotated[str, \"Fields to return. Defaults to all.\"] = \"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the board for.",
          "fields": "str (required) - Fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_BOARD_BY_ID_ACTION_BY_FIELD",
        "description": "Get action's board field. Retrieves a specified `field` from the trello board associated with the provided trello `idaction`. Use 'all' to get all fields.\", ) def TRELLO_GET_ACTIONS_BOARD_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the board field for.\"], field: Annotated[str, \"The field name to retrieve from the board. Use 'all' to get all fields.\"] ): \"\"\"Get action's board field. Retrieves a specified `field` from the trello board associated with the provided trello `idaction`. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the board field for.",
          "field": "str (required) - The field name to retrieve from the board. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_BY_ID_ACTION",
        "description": "Get action by ID. Retrieves detailed information about a specific trello action by its id.\", ) def TRELLO_GET_ACTIONS_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to retrieve.\"], fields: Annotated[str, \"Fields to return. Defaults to all.\"] = \"\", display: Annotated[str, \"Display format for the action.\"] = \"\", entities: Annotated[str, \"Entities to include in the response.\"] = \"\", member: Annotated[str, \"Member information to include.\"] = \"\", member_creator: Annotated[str, \"Member creator information to include.\"] = \"\", member_creator_fields: Annotated[str, \"Member creator fields. Defaults to avatarHash, fullName, initials and username.\"] = \"\", member_fields: Annotated[str, \"Member fields. Defaults to avatarHash, fullName, initials and username.\"] = \"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to retrieve.",
          "fields": "str (required) - Fields to return. Defaults to all.",
          "display": "str (required) - Display format for the action.",
          "entities": "str (required) - Entities to include in the response.",
          "member": "str (required) - Member information to include.",
          "member_creator": "str (required) - Member creator information to include.",
          "member_creator_fields": "str (required) - Member creator fields. Defaults to avatarHash, fullName, initials and username.",
          "member_fields": "str (required) - Member fields. Defaults to avatarHash, fullName, initials and username."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_BY_ID_ACTION_BY_FIELD",
        "description": "Get action field by id. Retrieves the value of a specific field (e.g., 'data', 'date', 'type') from a trello action using its unique id. Use 'all' to get all fields.\", ) def TRELLO_GET_ACTIONS_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the field from.\"], field: Annotated[str, \"The field name to retrieve from the action. Use 'all' to get all fields.\"] ): \"\"\"Get action field by id. Retrieves the value of a specific field (e.g., 'data', 'date', 'type') from a trello action using its unique id. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the field from.",
          "field": "str (required) - The field name to retrieve from the action. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_UPDATE_ACTIONS_BY_ID_ACTION",
        "description": "Update action text. Updates the `text` field of a specific trello comment action, identified by `idaction`. Note: Only comment actions can be edited - other action types cannot be modified.\", ) def TRELLO_UPDATE_ACTIONS_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to update.\"], text: Annotated[str, \"The new text content for the action.\"] ): \"\"\"Update action text. Updates the `text` field of a specific trello comment action, identified by `idaction`. Note: Only comment actions can be edited - other action types cannot be modified.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to update.",
          "text": "str (required) - The new text content for the action."
        }
      },
      {
        "name": "TRELLO_UPDATE_ACTIONS_TEXT_BY_ID_ACTION",
        "description": "Update action text. Updates the text of an existing trello action (e.g., a comment or card update) identified by `idaction`; this change only affects the action's text content. Note: Only comment actions can be edited - other action types cannot be modified.\", ) def TRELLO_UPDATE_ACTIONS_TEXT_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to update.\"], value: Annotated[str, \"The new text content for the action.\"] ): \"\"\"Update action text. Updates the text of an existing trello action (e.g., a comment or card update) identified by `idaction`; this change only affects the action's text content. Note: Only comment actions can be edited - other action types cannot be modified.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to update.",
          "value": "str (required) - The new text content for the action."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_CARD_BY_ID_ACTION",
        "description": "Get card by action ID. Retrieves trello card details for a given idaction, which must be an action specifically linked to a card; returns only card data, not action details.\", ) def TRELLO_GET_ACTIONS_CARD_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the card from.\"], fields: Annotated[str, \"Comma-separated list of card fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the card from.",
          "fields": "str (required) - Comma-separated list of card fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_CARD_BY_ID_ACTION_BY_FIELD",
        "description": "Get action's card field. Retrieves a specific field from the trello card associated with the given action id. Use 'all' to get all fields.\", ) def TRELLO_GET_ACTIONS_CARD_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the card field from.\"], field: Annotated[str, \"The field name to retrieve from the card. Use 'all' to get all fields.\"] ): \"\"\"Get action's card field. Retrieves a specific field from the trello card associated with the given action id. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the card field from.",
          "field": "str (required) - The field name to retrieve from the card. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_DISPLAY_BY_ID_ACTION",
        "description": "Get action display by ID. Retrieves a display-friendly representation of an existing and accessible trello action for ui/report purposes, providing presentation-focused data instead of full raw details and without altering the action.\", ) def TRELLO_GET_ACTIONS_DISPLAY_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the display representation for.\"] ): \"\"\"Get action display by ID. Retrieves a display-friendly representation of an existing and accessible trello action for ui/report purposes, providing presentation-focused data instead of full raw details and without altering the action.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the display representation for."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_ENTITIES_BY_ID_ACTION",
        "description": "Get action entities by id. Retrieves all entities (e.g., boards, lists, cards, members) associated with a specific, existing trello action id.\", ) def TRELLO_GET_ACTIONS_ENTITIES_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the entities for.\"] ): \"\"\"Get action entities by id. Retrieves all entities (e.g., boards, lists, cards, members) associated with a specific, existing trello action id.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the entities for."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_LIST_BY_ID_ACTION",
        "description": "Get an action's list. Retrieves the trello list associated with a specific trello action id, for actions linked to a list.\", ) def TRELLO_GET_ACTIONS_LIST_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the list from.\"], fields: Annotated[str, \"Comma-separated list of list fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the list from.",
          "fields": "str (required) - Comma-separated list of list fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_LIST_BY_ID_ACTION_BY_FIELD",
        "description": "Get field of action's list. Retrieves a specific field of the list associated with a trello action, returning only that single field's value. Use 'all' to get all fields.\", ) def TRELLO_GET_ACTIONS_LIST_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the list field from.\"], field: Annotated[str, \"The field name to retrieve from the list. Use 'all' to get all fields.\"] ): \"\"\"Get field of action's list. Retrieves a specific field of the list associated with a trello action, returning only that single field's value. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the list field from.",
          "field": "str (required) - The field name to retrieve from the list. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_MEMBER_BY_ID_ACTION",
        "description": "Get action's member by id. Retrieves specified details of the trello member who performed the action identified by idaction; information is specific to this action's context, not the member's full profile.\", ) def TRELLO_GET_ACTIONS_MEMBER_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the member from.\"], fields: Annotated[str, \"Comma-separated list of member fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the member from.",
          "fields": "str (required) - Comma-separated list of member fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_MEMBER_BY_ID_ACTION_BY_FIELD",
        "description": "Get member action field by ID. Fetches a specific field of a member for a trello action, returning only one field per call for optimized data retrieval. Use 'all' to get all fields.\", ) def TRELLO_GET_ACTIONS_MEMBER_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the member field from.\"], field: Annotated[str, \"The field name to retrieve from the member. Use 'all' to get all fields.\"] ): \"\"\"Get member action field by ID. Fetches a specific field of a member for a trello action, returning only one field per call for optimized data retrieval. Use 'all' to get all fields.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the member field from.",
          "field": "str (required) - The field name to retrieve from the member. Use 'all' to get all fields."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_MEMBER_CREATOR_BY_ID_ACTION",
        "description": "Fetch action member creator. Retrieves details about the trello member who created the action with the given idaction.\", ) def TRELLO_GET_ACTIONS_MEMBER_CREATOR_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the member creator from.\"], fields: Annotated[str, \"Comma-separated list of member fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the member creator from.",
          "fields": "str (required) - Comma-separated list of member fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_MEMBER_CREATOR_BY_ID_ACTION_BY_FIELD",
        "description": "Get action member creator field. Gets information about the creator of a trello action.\", ) def TRELLO_GET_ACTIONS_MEMBER_CREATOR_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the member creator field from.\"], field: Annotated[str, \"The specific field to retrieve from the member creator.\"] ): \"\"\"Get action member creator field. Gets information about the creator of a trello action.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the member creator field from.",
          "field": "str (required) - The specific field to retrieve from the member creator."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_ORGANIZATION_BY_ID_ACTION",
        "description": "Fetch organization action by id. Fetches the organization details for a given trello action, if the action has an associated organization.\", ) def TRELLO_GET_ACTIONS_ORGANIZATION_BY_ID_ACTION( id_action: Annotated[str, \"The ID of the action to get the organization from.\"], fields: Annotated[str, \"Comma-separated list of organization fields to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the organization from.",
          "fields": "str (required) - Comma-separated list of organization fields to return. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ACTIONS_ORGANIZATION_BY_ID_ACTION_BY_FIELD",
        "description": "Get action's organization field. Retrieves the value of a specific field for the organization associated with a trello idaction; use if the action has an organization and you need only that field (e.g., 'name', 'id', 'url').\", ) def TRELLO_GET_ACTIONS_ORGANIZATION_BY_ID_ACTION_BY_FIELD( id_action: Annotated[str, \"The ID of the action to get the organization field from.\"], field: Annotated[str, \"The specific field to retrieve from the organization.\"] ): \"\"\"Get action's organization field. Retrieves the value of a specific field for the organization associated with a trello idaction; use if the action has an organization and you need only that field (e.g., 'name', 'id', 'url').\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the action to get the organization field from.",
          "field": "str (required) - The specific field to retrieve from the organization."
        }
      },
      {
        "name": "TRELLO_GET_BATCH",
        "description": "Get batch. Executes multiple trello api get requests in a single batch operation for efficient bulk data retrieval.\", ) def TRELLO_GET_BATCH( urls: Annotated[str, \"Comma-separated list of Trello API URLs to fetch in batch. URLs should be relative paths like '/boards/123', '/cards/456', etc.\"] ): \"\"\"Get batch. Executes multiple trello api get requests in a single batch operation for efficient bulk data retrieval.\"\"",
        "parameters": {
          "urls": "str (required) - Comma-separated list of Trello API URLs to fetch in batch. URLs should be relative paths like '/boards/123', '/cards/456', etc."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_ACTIONS_BY_ID_BOARD",
        "description": "Get board actions by id. Retrieves actions (e.g., card creations, comments) for a trello board by its id, useful for activity tracking; the board must exist.\", ) def TRELLO_GET_BOARDS_ACTIONS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get actions from.\"], before: Annotated[str, \"Return actions before this date.\"] = \"\", display: Annotated[str, \"Return display-friendly representation of actions.\"] = \"\", entities: Annotated[str, \"Return entities associated with actions.\"] = \"\", fields: Annotated[str, \"Comma-separated list of action fields to return. Defaults to all.\"] = \"all\", filter: Annotated[str, \"Filter actions by type. Defaults to all.\"] = \"all\", format: Annotated[str, \"Format of the response. Defaults to list.\"] = \"list\", id_models: Annotated[str, \"Comma-separated list of model IDs to filter actions.\"] = \"\", limit: Annotated[str, \"Maximum number of actions to return. Defaults to 50.\"] = \"50\", member: Annotated[str, \"Filter actions by member.\"] = \"\", member_creator: Annotated[str, \"Filter actions by member creator.\"] = \"\", member_creator_fields: Annotated[str, \"Comma-separated list of member creator fields. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[str, \"Comma-separated list of member fields. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[str, \"Page number for pagination. Defaults to 0.\"] = \"0\", since: Annotated[str, \"Return actions since this date.\"] = \"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get actions from.",
          "before": "str (required) - Return actions before this date.",
          "display": "str (required) - Return display-friendly representation of actions.",
          "entities": "str (required) - Return entities associated with actions.",
          "fields": "str (required) - Comma-separated list of action fields to return. Defaults to all.",
          "filter": "str (required) - Filter actions by type. Defaults to all.",
          "format": "str (required) - Format of the response. Defaults to list.",
          "id_models": "str (required) - Comma-separated list of model IDs to filter actions.",
          "limit": "str (required) - Maximum number of actions to return. Defaults to 50.",
          "member": "str (required) - Filter actions by member.",
          "member_creator": "str (required) - Filter actions by member creator.",
          "member_creator_fields": "str (required) - Comma-separated list of member creator fields. Defaults to avatarHash, fullName, initials and username.",
          "member_fields": "str (required) - Comma-separated list of member fields. Defaults to avatarHash, fullName, initials and username.",
          "page": "str (required) - Page number for pagination. Defaults to 0.",
          "since": "str (required) - Return actions since this date."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_STARS_BY_ID_BOARD",
        "description": "Get board stars by board ID. Retrieves board stars (user-marked favorites) for a specified trello board, where idboard must be an existing board; use to list a user's starred boards or all stars on a particular board.\", ) def TRELLO_GET_BOARDS_STARS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get stars from.\"], filter: Annotated[str, \"Filter stars by scope. Defaults to mine.\"] = \"mine",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get stars from.",
          "filter": "str (required) - Filter stars by scope. Defaults to mine."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_BOARD_STARS_BY_ID_BOARD",
        "description": "Get board stars by board ID. Retrieves board stars (user-marked favorites) for a specified trello board, where idboard must be an existing board; use to list a user's starred boards or all stars on a particular board.\", ) def TRELLO_GET_BOARDS_BOARD_STARS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get stars from.\"], filter: Annotated[str, \"Filter stars by scope. Defaults to mine.\"] = \"mine",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get stars from.",
          "filter": "str (required) - Filter stars by scope. Defaults to mine."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERS_INVITED_BY_ID_BOARD",
        "description": "Get invited board members. Note: Trello API doesn't provide a direct way to get pending invitations. This tool returns current board members and explains the limitation.\", ) def TRELLO_GET_BOARDS_MEMBERS_INVITED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get invited members from.\"], fields: Annotated[str, \"Comma-separated list of member fields. Defaults to all.\"] = \"all",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get invited members from.",
          "fields": "str (required) - Comma-separated list of member fields. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERS_INVITED_BY_ID_BOARD_BY_FIELD",
        "description": "Retrieve invited board member field. Note: Trello API doesn't support getting pending invitations. This tool explains the limitation and returns current board members.\", ) def TRELLO_GET_BOARDS_MEMBERS_INVITED_BY_ID_BOARD_BY_FIELD( field: Annotated[str, \"The field to retrieve from invited members (e.g., email, username, fullName).\"], id_board: Annotated[str, \"The ID of the board to get invited member fields from.\"] ): \"\"\"Retrieve invited board member field. Note: Trello API doesn't support getting pending invitations. This tool explains the limitation and returns current board members.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MY_PREFS_BY_ID_BOARD",
        "description": "Get my board preferences. Retrieves the authenticated user's preferences for a specific trello board.\", ) def TRELLO_GET_BOARDS_MY_PREFS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get preferences for.\"] ): \"\"\"Get my board preferences. Retrieves the authenticated user's preferences for a specific trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get preferences for."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_ORGANIZATION_BY_ID_BOARD",
        "description": "Get board organization. Fetches information about the trello workspace (organization) to which a specific board belongs, returning details for the workspace only, not the board itself or its content.\", ) def TRELLO_GET_BOARDS_ORGANIZATION_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get organization information for.\"], fields: Annotated[str, \"The fields to retrieve from the organization (e.g., name, displayName, desc, website). Defaults to all.\"] = \"all",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get organization information for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_ORGANIZATION_BY_ID_BOARD_BY_FIELD",
        "description": "Get board organization field. Retrieves a specific field from the organization associated with a trello board, useful for obtaining targeted details without fetching the entire organization object.\", ) def TRELLO_GET_BOARDS_ORGANIZATION_BY_ID_BOARD_BY_FIELD( field: Annotated[str, \"The field to retrieve from the organization (e.g., name, displayName, desc, website).\"], id_board: Annotated[str, \"The ID of the board to get organization field from.\"] ): \"\"\"Get board organization field. Retrieves a specific field from the organization associated with a trello board, useful for obtaining targeted details without fetching the entire organization object.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_ACTIONS_BY_ID_CARD",
        "description": "Get card actions by id. Retrieves the history of actions (e.g., comments, updates, moves) for a trello card specified by idcard; the card must exist and very old actions might not be available.\", ) def TRELLO_GET_CARDS_ACTIONS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get actions for.\"], before: Annotated[str | None, \"An action ID. Only return actions before this action.\"] = None, display: Annotated[str | None, \"The format for the returned actions.\"] = None, entities: Annotated[str | None, \"Whether to include entities in the response.\"] = None, fields: Annotated[str, \"The fields to retrieve from the actions (e.g., id, type, date, data). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The types of actions to return (e.g., commentCard, updateCard). Defaults to commentCard and updateCard:idList.\"] = \"commentCard,updateCard:idList\", format: Annotated[str, \"The format for the returned actions. Defaults to list.\"] = \"list\", id_models: Annotated[str | None, \"The IDs of models to include in the response.\"] = None, limit: Annotated[str, \"The maximum number of actions to return. Defaults to 50.\"] = \"50\", member: Annotated[str | None, \"Whether to include member information.\"] = None, member_creator: Annotated[str | None, \"Whether to include member creator information.\"] = None, member_creator_fields: Annotated[str, \"The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[str, \"The fields to retrieve from members. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[str, \"The page of results to return. Defaults to 0.\"] = \"0\", since: Annotated[str | None, \"An action ID. Only return actions after this action.\"] = None ): \"\"\"Get card actions by id. Retrieves the history of actions (e.g., comments, updates, moves) for a trello card specified by idcard; the card must exist and very old actions might not be available.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get actions for.",
          "before": "str | None (required) - An action ID. Only return actions before this action.",
          "display": "str | None (required) - The format for the returned actions.",
          "entities": "str | None (required) - Whether to include entities in the response.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_ATTACHMENTS_BY_ID_CARD",
        "description": "Get card attachments. Retrieves attachments for a trello card.\", ) def TRELLO_GET_CARDS_ATTACHMENTS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get attachments for.\"], fields: Annotated[str, \"The fields to retrieve from the attachments (e.g., id, name, url, mimeType). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get attachments for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_BOARD_BY_ID_CARD",
        "description": "Get board by card id. Fetches detailed information about the trello board to which a specific, existing, and accessible card belongs, using the card's id or short link.\", ) def TRELLO_GET_CARDS_BOARD_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get board information for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get board information for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_BOARD_BY_ID_CARD_BY_FIELD",
        "description": "Get board field by card ID. Retrieves a specific field from the board associated with a given trello card.\", ) def TRELLO_GET_CARDS_BOARD_BY_ID_CARD_BY_FIELD( field: Annotated[str, \"The field to retrieve from the board (e.g., id, name, desc, closed).\"], id_card: Annotated[str, \"The ID of the card to get board field from.\"] ): \"\"\"Get board field by card ID. Retrieves a specific field from the board associated with a given trello card.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_BY_ID_CARD_BY_FIELD",
        "description": "Get card field by id. Retrieves the value of a single, specified field from a trello card.\", ) def TRELLO_GET_CARDS_BY_ID_CARD_BY_FIELD( field: Annotated[str, \"The field to retrieve from the card (e.g., id, name, desc, closed, due).\"], id_card: Annotated[str, \"The ID of the card to get field from.\"] ): \"\"\"Get card field by id. Retrieves the value of a single, specified field from a trello card.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_CHECK_ITEM_STATES_BY_ID_CARD",
        "description": "Get card check item states. Gets the states (e.g., 'complete', 'incomplete') of checklist items on a trello card; returns only item states, not full checklist or card details.\", ) def TRELLO_GET_CARDS_CHECK_ITEM_STATES_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get check item states from.\"], fields: Annotated[str, \"The fields to retrieve from the check item states (e.g., idCheckItem, state). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get check item states from.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_CHECKLISTS_BY_ID_CARD",
        "description": "Get card checklists by ID. Retrieves all checklists, including their check items, for a trello card specified by its id or shortlink, if the card exists and is accessible.\", ) def TRELLO_GET_CARDS_CHECKLISTS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get checklists from.\"], card_fields: Annotated[str, \"The fields to retrieve from the card (e.g., id, name, desc). Defaults to all.\"] = \"all\", cards: Annotated[str, \"Whether to include card information. Defaults to none.\"] = \"none\", check_item_fields: Annotated[str, \"The fields to retrieve from check items (e.g., name, nameData, pos, state). Defaults to name,nameData,pos,state.\"] = \"name,nameData,pos,state\", check_items: Annotated[str, \"Whether to include check items. Defaults to all.\"] = \"all\", fields: Annotated[str, \"The fields to retrieve from the checklists (e.g., id, name, pos). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The types of checklists to return. Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get checklists from.",
          "card_fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_LIST_BY_ID_CARD",
        "description": "Get list by card ID. Gets the trello list to which a specified card (which must exist) belongs.\", ) def TRELLO_GET_CARDS_LIST_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get list information for.\"], fields: Annotated[str, \"The fields to retrieve from the list (e.g., id, name, closed, pos). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get list information for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_LIST_BY_ID_CARD_BY_FIELD",
        "description": "Get card list field. Fetches a specific field from the trello list that a given card belongs to.\", ) def TRELLO_GET_CARDS_LIST_BY_ID_CARD_BY_FIELD( field: Annotated[str, \"The field to retrieve from the list (e.g., id, name, closed, pos).\"], id_card: Annotated[str, \"The ID of the card to get list field from.\"] ): \"\"\"Get card list field. Fetches a specific field from the trello list that a given card belongs to.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_MEMBERS_BY_ID_CARD",
        "description": "Get card members. Retrieves members of a trello card, identified by its id or shortlink, allowing customization of which member fields are returned.\", ) def TRELLO_GET_CARDS_MEMBERS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get members from.\"], fields: Annotated[str, \"The fields to retrieve from the members (e.g., avatarHash, fullName, initials, username). Defaults to avatarHash,fullName,initials,username.\"] = \"avatarHash,fullName,initials,username",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get members from.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_MEMBERS_VOTED_BY_ID_CARD",
        "description": "Get card members voted. Fetches members who voted on a trello card; requires an existing card id, the voting power-up to be active on the board, and members to have voted; returns member details, not vote counts.\", ) def TRELLO_GET_CARDS_MEMBERS_VOTED_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get voted members from.\"], fields: Annotated[str, \"The fields to retrieve from the voted members (e.g., avatarHash, fullName, initials, username). Defaults to avatarHash,fullName,initials,username.\"] = \"avatarHash,fullName,initials,username",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get voted members from.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_STICKERS_BY_ID_CARD",
        "description": "Get card stickers by ID card. Retrieves all visual stickers (used for categorization, emphasis, or decoration) from an existing and accessible trello card; this read-only action does not affect other card elements.\", ) def TRELLO_GET_CARDS_STICKERS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to get stickers from.\"], fields: Annotated[str, \"The fields to retrieve from the stickers (e.g., id, image, imageUrl, left, top, zIndex). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card to get stickers from.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CARDS_STICKERS_BY_ID_CARD_BY_ID_STICKER",
        "description": "Get card sticker by id. Call this action to retrieve detailed properties (like image, position, rotation) of a specific sticker on a trello card.\", ) def TRELLO_GET_CARDS_STICKERS_BY_ID_CARD_BY_ID_STICKER( id_card: Annotated[str, \"The ID of the card containing the sticker.\"], id_sticker: Annotated[str, \"The ID of the sticker to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the sticker (e.g., id, image, imageUrl, left, top, zIndex, rotation). Defaults to all.\"] = \"all",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the sticker.",
          "id_sticker": "str (required) - The ID of the sticker to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECK_ITEM_BY_ID",
        "description": "Get check item by id. Retrieves a specific check item from a checklist using the checklist id and check item id.\", ) def TRELLO_GET_CHECK_ITEM_BY_ID( id_checklist: Annotated[str, \"The ID of the checklist containing the check item.\"], id_check_item: Annotated[str, \"The ID of the check item to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the check item (e.g., name, nameData, pos, state). Defaults to name,nameData,pos,state.\"] = \"name,nameData,pos,state",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist containing the check item.",
          "id_check_item": "str (required) - The ID of the check item to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_BOARD_BY_ID_CHECKLIST",
        "description": "Get board for a checklist. Retrieves the trello board a specific checklist belongs to, using the checklist id.\", ) def TRELLO_GET_CHECKLISTS_BOARD_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to get board information for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to get board information for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_BOARD_BY_ID_CHECKLIST_BY_FIELD",
        "description": "Get checklist's board field. Retrieves a specified field (e.g., 'name', 'desc') from the trello board associated with the given idchecklist.\", ) def TRELLO_GET_CHECKLISTS_BOARD_BY_ID_CHECKLIST_BY_FIELD( field: Annotated[str, \"The field to retrieve from the board (e.g., name, desc, closed, url).\"], id_checklist: Annotated[str, \"The ID of the checklist to get board field from.\"] ): \"\"\"Get checklist's board field. Retrieves a specified field (e.g., 'name', 'desc') from the trello board associated with the given idchecklist.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_BY_ID_CHECKLIST",
        "description": "Get checklist by ID. Fetches a trello checklist by its idchecklist, requiring the id to refer to an existing checklist, and allows specifying which details of the checklist, its cards, and check items are returned.\", ) def TRELLO_GET_CHECKLISTS_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to retrieve.\"], card_fields: Annotated[str, \"The fields to retrieve from the cards (e.g., id, name, desc, closed). Defaults to all.\"] = \"all\", cards: Annotated[str, \"Whether to include card information. Defaults to none.\"] = \"none\", check_item_fields: Annotated[str, \"The fields to retrieve from check items (e.g., name, nameData, pos, state). Defaults to name,nameData,pos,state.\"] = \"name,nameData,pos,state\", check_items: Annotated[str, \"Whether to include check items. Defaults to all.\"] = \"all\", fields: Annotated[str, \"The fields to retrieve from the checklist (e.g., id, name, pos). Defaults to all.\"] = \"all",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to retrieve.",
          "card_fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_BY_ID_CHECKLIST_BY_FIELD",
        "description": "Get checklist field. Retrieves a specific field's value from a trello checklist by its id and the field name, without loading the entire checklist object or its items.\", ) def TRELLO_GET_CHECKLISTS_BY_ID_CHECKLIST_BY_FIELD( field: Annotated[str, \"The field to retrieve from the checklist (e.g., id, name, pos, idBoard).\"], id_checklist: Annotated[str, \"The ID of the checklist to get field from.\"] ): \"\"\"Get checklist field. Retrieves a specific field's value from a trello checklist by its id and the field name, without loading the entire checklist object or its items.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_CARDS_BY_ID_CHECKLIST_BY_FILTER",
        "description": "Get cards from a checklist by filter. Retrieves cards from a specified trello checklist, filterable by card id or status (e.g., 'all', 'open'), noting the response is a single card object even if the filter could match multiple cards.\", ) def TRELLO_GET_CHECKLISTS_CARDS_BY_ID_CHECKLIST_BY_FILTER( filter: Annotated[str, \"The filter to apply to cards (e.g., 'all', 'open', 'closed', or specific card ID).\"], id_checklist: Annotated[str, \"The ID of the checklist to get cards from.\"] ): \"\"\"Get cards from a checklist by filter. Retrieves cards from a specified trello checklist, filterable by card id or status (e.g., 'all', 'open'), noting the response is a single card object even if the filter could match multiple cards.\"\"",
        "parameters": {
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_CHECKLISTS_CHECK_ITEMS_BY_ID_CHECKLIST",
        "description": "Get checklist items by ID. Retrieves check items from an existing trello checklist, optionally filtering them and specifying which fields to return.\", ) def TRELLO_GET_CHECKLISTS_CHECK_ITEMS_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to get check items from.\"], fields: Annotated[str, \"The fields to retrieve from the check items (e.g., name, nameData, pos, state). Defaults to name,nameData,pos,state.\"] = \"name,nameData,pos,state\", filter: Annotated[str, \"The filter to apply to check items (e.g., 'all', 'visible'). Defaults to all.\"] = \"all",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to get check items from.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LABELS_BOARD_BY_ID_LABEL",
        "description": "Get board by label ID. Retrieves the trello board to which a given, valid trello label id (idlabel) belongs.\", ) def TRELLO_GET_LABELS_BOARD_BY_ID_LABEL( id_label: Annotated[str, \"The ID of the label to get board information for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_label": "str (required) - The ID of the label to get board information for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LABELS_BOARD_BY_ID_LABEL_BY_FIELD",
        "description": "Retrieve board field by label id. Retrieves a specified field (e.g., 'name', 'url') from the trello board associated with a given idlabel.\", ) def TRELLO_GET_LABELS_BOARD_BY_ID_LABEL_BY_FIELD( field: Annotated[str, \"The field to retrieve from the board (e.g., name, url, desc, closed).\"], id_label: Annotated[str, \"The ID of the label to get board field from.\"] ): \"\"\"Retrieve board field by label id. Retrieves a specified field (e.g., 'name', 'url') from the trello board associated with a given idlabel.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LABELS_BY_ID_LABEL",
        "description": "Get label by id. Retrieves detailed information for a specific trello label by its id, allowing selection of specific fields to return.\", ) def TRELLO_GET_LABELS_BY_ID_LABEL( id_label: Annotated[str, \"The ID of the label to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the label (e.g., id, name, color, idBoard). Defaults to all.\"] = \"all",
        "parameters": {
          "id_label": "str (required) - The ID of the label to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LISTS_ACTIONS_BY_ID_LIST",
        "description": "Get list actions by ID. Retrieves actions (like card movements or comments, newest first) for a trello list by its id, to track history or create activity logs.\", ) def TRELLO_GET_LISTS_ACTIONS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to get actions for.\"], before: Annotated[str | None, \"An action ID. Only return actions before this action.\"] = None, entities: Annotated[str | None, \"Whether to include entities in the response.\"] = None, fields: Annotated[str, \"The fields to retrieve from the actions (e.g., id, type, date, data). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The types of actions to return (e.g., commentCard, updateCard). Defaults to all.\"] = \"all\", format: Annotated[str, \"The format for the returned actions. Defaults to list.\"] = \"list\", id_models: Annotated[str | None, \"The IDs of models to include in the response.\"] = None, limit: Annotated[str, \"The maximum number of actions to return. Defaults to 5.\"] = \"5\", member: Annotated[str | None, \"Whether to include member information.\"] = None, member_creator: Annotated[str | None, \"Whether to include member creator information.\"] = None, member_creator_fields: Annotated[str, \"The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[str, \"The fields to retrieve from members. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[str, \"The page of results to return. Defaults to 1.\"] = \"1\", since: Annotated[str | None, \"An action ID. Only return actions after this action.\"] = None ): \"\"\"Get list actions by ID. Retrieves actions (like card movements or comments, newest first) for a trello list by its id, to track history or create activity logs.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get actions for.",
          "before": "str | None (required) - An action ID. Only return actions before this action.",
          "entities": "str | None (required) - Whether to include entities in the response.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LISTS_BOARD_BY_ID_LIST",
        "description": "Get board by list ID. Retrieves the board to which a specific trello list belongs.\", ) def TRELLO_GET_LISTS_BOARD_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to get the board for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get the board for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_LIST_ID_BOARD_GET",
        "description": "Get board by list ID. Deprecated: please use the `get lists board by id list` action instead. retrieves the board to which a specific trello list belongs.\", ) def TRELLO_LIST_ID_BOARD_GET( id_list: Annotated[str, \"The ID of the list to get the board for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get the board for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LISTS_BOARD_BY_ID_LIST_BY_FIELD",
        "description": "Get board field by list ID. Retrieves a specific field (e.g., 'name', 'desc', 'url') from the trello board associated with a given list id, useful when the board's id is not directly known.\", ) def TRELLO_GET_LISTS_BOARD_BY_ID_LIST_BY_FIELD( id_list: Annotated[str, \"The ID of the list to get the board field for.\"], field: Annotated[str, \"The specific field to retrieve from the board (e.g., name, desc, url, closed, idOrganization).\"] ): \"\"\"Get board field by list ID. Retrieves a specific field (e.g., 'name', 'desc', 'url') from the trello board associated with a given list id, useful when the board's id is not directly known.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get the board field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LISTS_BY_ID_LIST",
        "description": "Get list by ID. Retrieves a trello list by its unique id, optionally including details for its cards and parent board.\", ) def TRELLO_GET_LISTS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to retrieve.\"], board: Annotated[str | None, \"Whether to include board information.\"] = None, board_fields: Annotated[str, \"The fields to retrieve from the board. Defaults to name, desc, descData, closed, idOrganization, pinned, url and prefs.\"] = \"name,desc,descData,closed,idOrganization,pinned,url,prefs\", card_fields: Annotated[str, \"The fields to retrieve from cards. Defaults to all.\"] = \"all\", cards: Annotated[str, \"Whether to include cards in the response. Defaults to none.\"] = \"none\", fields: Annotated[str, \"The fields to retrieve from the list. Defaults to name, closed, idBoard and pos.\"] = \"name,closed,idBoard,pos",
        "parameters": {
          "id_list": "str (required) - The ID of the list to retrieve.",
          "board": "str | None (required) - Whether to include board information.",
          "board_fields": "str (required) - The fields to retrieve from the board. Defaults to name, desc, descData, closed, idOrganization, pinned, url and prefs.",
          "card_fields": "str (required) - The fields to retrieve from cards. Defaults to all.",
          "cards": "str (required) - Whether to include cards in the response. Defaults to none.",
          "fields": "str (required) - The fields to retrieve from the list. Defaults to name, closed, idBoard and pos."
        }
      },
      {
        "name": "TRELLO_LIST_GET_BY_ID_LIST",
        "description": "Get list by ID. Retrieves a trello list by its unique id, optionally including details for its cards and parent board. <<DEPRECATED use get_lists_by_id_list>>\", ) def TRELLO_LIST_GET_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to retrieve.\"], board: Annotated[str | None, \"Whether to include board information.\"] = None, board_fields: Annotated[str, \"The fields to retrieve from the board. Defaults to name, desc, descData, closed, idOrganization, pinned, url and prefs.\"] = \"name,desc,descData,closed,idOrganization,pinned,url,prefs\", card_fields: Annotated[str, \"The fields to retrieve from cards. Defaults to all.\"] = \"all\", cards: Annotated[str, \"Whether to include cards in the response. Defaults to none.\"] = \"none\", fields: Annotated[str, \"The fields to retrieve from the list. Defaults to name, closed, idBoard and pos.\"] = \"name,closed,idBoard,pos",
        "parameters": {
          "id_list": "str (required) - The ID of the list to retrieve.",
          "board": "str | None (required) - Whether to include board information.",
          "board_fields": "str (required) - The fields to retrieve from the board. Defaults to name, desc, descData, closed, idOrganization, pinned, url and prefs.",
          "card_fields": "str (required) - The fields to retrieve from cards. Defaults to all.",
          "cards": "str (required) - Whether to include cards in the response. Defaults to none.",
          "fields": "str (required) - The fields to retrieve from the list. Defaults to name, closed, idBoard and pos."
        }
      },
      {
        "name": "TRELLO_GET_LISTS_BY_ID_LIST_BY_FIELD",
        "description": "Get list field value. Fetches the value of a single, specified field from a trello list.\", ) def TRELLO_GET_LISTS_BY_ID_LIST_BY_FIELD( id_list: Annotated[str, \"The ID of the list to get the field from.\"], field: Annotated[str, \"The specific field to retrieve from the list (e.g., name, closed, idBoard, pos).\"] ): \"\"\"Get list field value. Fetches the value of a single, specified field from a trello list.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_LISTS_CARDS_BY_ID_LIST_BY_FILTER",
        "description": "Get list cards by filter. Retrieves cards from a specific trello list, filtered by criteria like 'open', 'closed', or 'all'.\", ) def TRELLO_GET_LISTS_CARDS_BY_ID_LIST_BY_FILTER( id_list: Annotated[str, \"The ID of the list to get cards from.\"], filter: Annotated[str, \"The filter criteria for cards (e.g., 'open', 'closed', 'all').\"] ): \"\"\"Get list cards by filter. Retrieves cards from a specific trello list, filtered by criteria like 'open', 'closed', or 'all'.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to get cards from.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBER_BOARD_BACKGROUND",
        "description": "Get Member Board Background. Retrieves a specific custom board background for a trello member, using the member's id and the custom board background's id.\", ) def TRELLO_GET_MEMBER_BOARD_BACKGROUND( id_member: Annotated[str, \"The ID of the member to get the custom board background for.\"], id_board_background: Annotated[str, \"The ID of the custom board background to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the custom board background (e.g., id, name, brightness, tile). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the custom board background for.",
          "id_board_background": "str (required) - The ID of the custom board background to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_CUSTOM_BOARD_BACKGROUNDS_BY_ID_MEMBER",
        "description": "Get Member Custom Board Backgrounds. Retrieves all custom board backgrounds for a trello member.\", ) def TRELLO_GET_MEMBERS_CUSTOM_BOARD_BACKGROUNDS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get custom board backgrounds for.\"], fields: Annotated[str, \"The fields to retrieve from the custom board backgrounds (e.g., id, name, brightness, tile). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get custom board backgrounds for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBER_CUSTOM_BG",
        "description": "Get member custom board background. Retrieves metadata (e.g., brightness, urls, tiling status) for a specific custom board background of a trello member, not the image file itself.\", ) def TRELLO_GET_MEMBER_CUSTOM_BG( id_member: Annotated[str, \"The ID of the member to get the custom board background for.\"], id_board_background: Annotated[str, \"The ID of the custom board background to retrieve metadata for.\"], fields: Annotated[str, \"The fields to retrieve from the custom board background (e.g., id, name, brightness, tile, url). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the custom board background for.",
          "id_board_background": "str (required) - The ID of the custom board background to retrieve metadata for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBER_CUSTOM_EMOJI",
        "description": "Get member custom emoji. Retrieves a specific custom emoji by its id for a trello member, requiring that both the member and emoji exist and are associated.\", ) def TRELLO_GET_MEMBER_CUSTOM_EMOJI( id_member: Annotated[str, \"The ID of the member to get the custom emoji for.\"], id_custom_emoji: Annotated[str, \"The ID of the custom emoji to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the custom emoji (e.g., id, name, url, unscaled). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the custom emoji for.",
          "id_custom_emoji": "str (required) - The ID of the custom emoji to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_CUSTOM_EMOJI_BY_ID_MEMBER",
        "description": "Get member custom emoji. Retrieves all custom (user-specific, non-standard) emojis that a specified trello member has created or can access.\", ) def TRELLO_GET_MEMBERS_CUSTOM_EMOJI_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get custom emojis for.\"], filter: Annotated[str, \"The filter criteria for custom emojis (e.g., 'all', 'mine'). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get custom emojis for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_CUSTOM_STICKERS_BY_ID_MEMBER",
        "description": "Get member custom stickers. Retrieves a member's custom stickers, which are unique personalized stickers created by them, distinct from standard trello stickers.\", ) def TRELLO_GET_MEMBERS_CUSTOM_STICKERS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get custom stickers for.\"], filter: Annotated[str, \"The filter criteria for custom stickers (e.g., 'all', 'mine'). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get custom stickers for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBER_CUSTOM_STICKER",
        "description": "Get member custom sticker. Retrieves a specific custom sticker by id for a trello member; returns only sticker data (not its usage on cards/boards), with optional field selection.\", ) def TRELLO_GET_MEMBER_CUSTOM_STICKER( id_member: Annotated[str, \"The ID of the member to get the custom sticker for.\"], id_custom_sticker: Annotated[str, \"The ID of the custom sticker to retrieve.\"], fields: Annotated[str, \"The fields to retrieve from the custom sticker (e.g., id, name, url, image). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the custom sticker for.",
          "id_custom_sticker": "str (required) - The ID of the custom sticker to retrieve.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_ACTIONS_BY_ID_MEMBER",
        "description": "Get member actions by ID. Retrieves a list of actions for a specified trello member, allowing filtering by type, date, models, and control over output format and fields.\", ) def TRELLO_GET_MEMBERS_ACTIONS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get actions for.\"], before: Annotated[str | None, \"An action ID. Only return actions before this action.\"] = None, display: Annotated[str | None, \"Whether to include display information.\"] = None, entities: Annotated[str | None, \"Whether to include entities in the response.\"] = None, fields: Annotated[str, \"The fields to retrieve from the actions (e.g., id, type, date, data). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The types of actions to return (e.g., commentCard, updateCard). Defaults to all.\"] = \"all\", format: Annotated[str, \"The format for the returned actions. Defaults to list.\"] = \"list\", id_models: Annotated[str | None, \"The IDs of models to include in the response.\"] = None, limit: Annotated[str, \"The maximum number of actions to return. Defaults to 50.\"] = \"50\", member: Annotated[str | None, \"Whether to include member information.\"] = None, member_creator: Annotated[str | None, \"Whether to include member creator information.\"] = None, member_creator_fields: Annotated[str, \"The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[str, \"The fields to retrieve from members. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[str, \"The page of results to return. Defaults to 0.\"] = \"0\", since: Annotated[str | None, \"An action ID. Only return actions after this action.\"] = None ): \"\"\"Get member actions by ID. Retrieves a list of actions for a specified trello member, allowing filtering by type, date, models, and control over output format and fields.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get actions for.",
          "before": "str | None (required) - An action ID. Only return actions before this action.",
          "display": "str | None (required) - Whether to include display information.",
          "entities": "str | None (required) - Whether to include entities in the response.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_SAVED_SEARCHES_BY_ID_MEMBER",
        "description": "Get member saved searches. Retrieves all saved search queries for a trello member; this action only retrieves saved searches and does not execute them.\", ) def TRELLO_GET_MEMBERS_SAVED_SEARCHES_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get saved searches for.\"] ): \"\"\"Get member saved searches. Retrieves all saved search queries for a trello member; this action only retrieves saved searches and does not execute them.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get saved searches for."
        }
      },
      {
        "name": "TRELLO_GET_MEMBER_SAVED_SEARCH",
        "description": "Get Member Saved Search. Fetches the details of a specific saved search for a trello member; this does not execute the search.\", ) def TRELLO_GET_MEMBER_SAVED_SEARCH( id_member: Annotated[str, \"The ID of the member to get the saved search for.\"], id_saved_search: Annotated[str, \"The ID of the saved search to retrieve.\"] ): \"\"\"Get Member Saved Search. Fetches the details of a specific saved search for a trello member; this does not execute the search.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the saved search for.",
          "id_saved_search": "str (required) - The ID of the saved search to retrieve."
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARD_BACKGROUNDS_BY_ID_MEMBER",
        "description": "Get member board backgrounds. Fetches the board backgrounds for a specified trello member.\", ) def TRELLO_GET_MEMBERS_BOARD_BACKGROUNDS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get board backgrounds for.\"], filter: Annotated[str, \"The filter criteria for board backgrounds (e.g., 'all', 'premium'). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get board backgrounds for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARDS_BY_ID_MEMBER",
        "description": "Get member boards by id. Retrieves board-level details (not lists/cards) for trello boards associated with a member id or username, allowing extensive customization of the returned data.\", ) def TRELLO_GET_MEMBERS_BOARDS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get boards for.\"], action_fields: Annotated[str, \"The fields to retrieve from actions. Defaults to all.\"] = \"all\", actions: Annotated[str, \"Whether to include actions in the response. Defaults to none.\"] = \"none\", actions_entities: Annotated[str, \"Whether to include action entities. Defaults to false.\"] = \"false\", actions_format: Annotated[str, \"The format for actions. Defaults to list.\"] = \"list\", actions_limit: Annotated[str, \"The maximum number of actions to return. Defaults to 5.\"] = \"5\", actions_since: Annotated[str | None, \"An action ID. Only return actions after this action.\"] = None, fields: Annotated[str, \"The fields to retrieve from boards (e.g., id, name, desc, closed). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The filter criteria for boards (e.g., 'all', 'open', 'closed', 'starred'). Defaults to all.\"] = \"all\", lists: Annotated[str, \"Whether to include lists in the response. Defaults to open.\"] = \"open\", memberships: Annotated[str, \"Whether to include memberships in the response. Defaults to none.\"] = \"none\", organization: Annotated[str, \"Whether to include organization information. Defaults to false.\"] = \"false\", organization_fields: Annotated[str, \"The fields to retrieve from organizations. Defaults to name and displayName.\"] = \"name,displayName",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get boards for.",
          "action_fields": "str (required) - The fields to retrieve from actions. Defaults to all.",
          "actions": "str (required) - Whether to include actions in the response. Defaults to none.",
          "actions_entities": "str (required) - Whether to include action entities. Defaults to false.",
          "actions_format": "str (required) - The format for actions. Defaults to list.",
          "actions_limit": "str (required) - The maximum number of actions to return. Defaults to 5.",
          "actions_since": "str | None (required) - An action ID. Only return actions after this action.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_MEMBER_GET_BOARDS_BY_ID_MEMBER",
        "description": "Get member boards by id. Deprecated: use `getmembersboardsbyidmember`; retrieves trello boards for a member (id/username).\", ) def TRELLO_MEMBER_GET_BOARDS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get boards for.\"], action_fields: Annotated[str, \"The fields to retrieve from actions. Defaults to all.\"] = \"all\", actions: Annotated[str, \"Whether to include actions in the response. Defaults to none.\"] = \"none\", actions_entities: Annotated[str, \"Whether to include action entities. Defaults to false.\"] = \"false\", actions_format: Annotated[str, \"The format for actions. Defaults to list.\"] = \"list\", actions_limit: Annotated[str, \"The maximum number of actions to return. Defaults to 5.\"] = \"5\", actions_since: Annotated[str | None, \"An action ID. Only return actions after this action.\"] = None, fields: Annotated[str, \"The fields to retrieve from boards (e.g., id, name, desc, closed). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The filter criteria for boards (e.g., 'all', 'open', 'closed', 'starred'). Defaults to all.\"] = \"all\", lists: Annotated[str, \"Whether to include lists in the response. Defaults to open.\"] = \"open\", memberships: Annotated[str, \"Whether to include memberships in the response. Defaults to none.\"] = \"none\", organization: Annotated[str, \"Whether to include organization information. Defaults to false.\"] = \"false\", organization_fields: Annotated[str, \"The fields to retrieve from organizations. Defaults to name and displayName.\"] = \"name,displayName",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get boards for.",
          "action_fields": "str (required) - The fields to retrieve from actions. Defaults to all.",
          "actions": "str (required) - Whether to include actions in the response. Defaults to none.",
          "actions_entities": "str (required) - Whether to include action entities. Defaults to false.",
          "actions_format": "str (required) - The format for actions. Defaults to list.",
          "actions_limit": "str (required) - The maximum number of actions to return. Defaults to 5.",
          "actions_since": "str | None (required) - An action ID. Only return actions after this action.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARDS_BY_ID_MEMBER_BY_FILTER",
        "description": "Get member boards with filter. Retrieves a list of boards for a specific trello member, applying a filter such as 'open', 'starred', or 'all'.\", ) def TRELLO_GET_MEMBERS_BOARDS_BY_ID_MEMBER_BY_FILTER( id_member: Annotated[str, \"The ID of the member to get boards for.\"], filter: Annotated[str, \"The filter criteria for boards (e.g., 'open', 'closed', 'starred', 'all'). Defaults to open.\"] = \"open",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get boards for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_MEMBER_GET_BOARDS",
        "description": "Get member boards with filter. Deprecated: retrieves a filtered list of boards for a trello member; use `get members boards by id member by filter` instead.\", ) def TRELLO_MEMBER_GET_BOARDS( id_member: Annotated[str, \"The ID of the member to get boards for.\"], filter: Annotated[str, \"The filter criteria for boards (e.g., 'open', 'closed', 'starred', 'all'). Defaults to open.\"] = \"open",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get boards for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARDS_INVITED_BY_ID_MEMBER",
        "description": "Get member's invited boards. Retrieves trello boards to which a specific member has been invited but has not yet joined.\", ) def TRELLO_GET_MEMBERS_BOARDS_INVITED_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get invited boards for.\"], fields: Annotated[str, \"The fields to retrieve from the invited boards (e.g., id, name, desc, closed). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get invited boards for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARDS_INVITED_BY_ID_MEMBER_BY_FIELD",
        "description": "Get member's invited board field. Retrieves a specific field from trello boards to which a member has been invited but not yet joined; returns an empty result for no pending invitations.\", ) def TRELLO_GET_MEMBERS_BOARDS_INVITED_BY_ID_MEMBER_BY_FIELD( id_member: Annotated[str, \"The ID of the member to get invited board field for.\"], field: Annotated[str, \"The specific field to retrieve from invited boards (e.g., id, name, desc, url).\"] ): \"\"\"Get member's invited board field. Retrieves a specific field from trello boards to which a member has been invited but not yet joined; returns an empty result for no pending invitations.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get invited board field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARD_STARS_BY_ID_MEMBER",
        "description": "Get member board stars. Fetches only the boards a specific trello member has starred, identified by their id or username.\", ) def TRELLO_GET_MEMBERS_BOARD_STARS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to get starred boards for.\"] ): \"\"\"Get member board stars. Fetches only the boards a specific trello member has starred, identified by their id or username.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get starred boards for."
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BOARD_STARS_BY_ID_MEMBER_BY_ID_BOARD_STAR",
        "description": "Get member board star. Retrieves detailed information about a specific board star (a trello board marked as a favorite) for a given trello member.\", ) def TRELLO_GET_MEMBERS_BOARD_STARS_BY_ID_MEMBER_BY_ID_BOARD_STAR( id_member: Annotated[str, \"The ID of the member to get the board star for.\"], id_board_star: Annotated[str, \"The ID of the board star to retrieve.\"] ): \"\"\"Get member board star. Retrieves detailed information about a specific board star (a trello board marked as a favorite) for a given trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to get the board star for.",
          "id_board_star": "str (required) - The ID of the board star to retrieve."
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_BY_ID_MEMBER_BY_FIELD",
        "description": "Get member field by ID. Efficiently retrieves a specific field (e.g., fullname, username, bio) of a trello member using their id or username, without fetching the entire member profile.\", ) def TRELLO_GET_MEMBERS_BY_ID_MEMBER_BY_FIELD( id_member: Annotated[str, \"The ID or username of the member to get the field from.\"], field: Annotated[str, \"The specific field to retrieve from the member (e.g., fullName, username, bio, email, avatarHash, initials).\"] ): \"\"\"Get member field by ID. Efficiently retrieves a specific field (e.g., fullname, username, bio) of a trello member using their id or username, without fetching the entire member profile.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_CARDS_BY_ID_MEMBER_BY_FILTER",
        "description": "Get member cards by filter. Retrieves cards for a trello member, applying a filter that must be a trello-recognized card filter.\", ) def TRELLO_GET_MEMBERS_CARDS_BY_ID_MEMBER_BY_FILTER( id_member: Annotated[str, \"The ID or username of the member to get cards for.\"], filter: Annotated[str, \"The filter criteria for cards (e.g., 'open', 'closed', 'all', 'visible', 'pinned', 'unpinned', 'recentlyViewed', 'starred', 'unstarred').\"] ): \"\"\"Get member cards by filter. Retrieves cards for a trello member, applying a filter that must be a trello-recognized card filter.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get cards for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_DELTAS_BY_ID_MEMBER",
        "description": "Get member deltas by ID. Retrieves a chronological list of all changes (deltas) made by a specific trello member, including modifications to boards, lists, and cards, to audit activity or sync data.\", ) def TRELLO_GET_MEMBERS_DELTAS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID or username of the member to get deltas for.\"], ix_last_update: Annotated[str, \"The index of the last update to start from (0 for all changes).\"], tags: Annotated[str, \"Comma-separated list of tags to filter deltas (e.g., 'board,list,card,action,member').\"] ): \"\"\"Get member deltas by ID. Retrieves a chronological list of all changes (deltas) made by a specific trello member, including modifications to boards, lists, and cards, to audit activity or sync data.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get deltas for.",
          "ix_last_update": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_NOTIFICATIONS_BY_ID_MEMBER",
        "description": "Get member notifications by id. Retrieves notifications for a trello member, specified by their id or username, with options for filtering and pagination.\", ) def TRELLO_GET_MEMBERS_NOTIFICATIONS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID or username of the member to get notifications for.\"], before: Annotated[str | None, \"An action ID. Only return notifications before this action.\"] = None, display: Annotated[str | None, \"Whether to include display information.\"] = None, entities: Annotated[str | None, \"Whether to include entities in the response.\"] = None, fields: Annotated[str, \"The fields to retrieve from the notifications (e.g., id, type, date, data). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The types of notifications to return (e.g., 'all', 'unread', 'read'). Defaults to all.\"] = \"all\", limit: Annotated[str, \"The maximum number of notifications to return. Defaults to 50.\"] = \"50\", member_creator: Annotated[str | None, \"Whether to include member creator information.\"] = None, member_creator_fields: Annotated[str, \"The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[str, \"The page of results to return. Defaults to 0.\"] = \"0\", read_filter: Annotated[str, \"Filter by read status (e.g., 'all', 'read', 'unread'). Defaults to all.\"] = \"all\", since: Annotated[str | None, \"An action ID. Only return notifications after this action.\"] = None ): \"\"\"Get member notifications by id. Retrieves notifications for a trello member, specified by their id or username, with options for filtering and pagination.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get notifications for.",
          "before": "str | None (required) - An action ID. Only return notifications before this action.",
          "display": "str | None (required) - Whether to include display information.",
          "entities": "str | None (required) - Whether to include entities in the response.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_NOTIFICATIONS_BY_ID_MEMBER_BY_FILTER",
        "description": "Get member notifications by filter. Retrieves a list of a trello member's notifications, filtered by specified types.\", ) def TRELLO_GET_MEMBERS_NOTIFICATIONS_BY_ID_MEMBER_BY_FILTER( id_member: Annotated[str, \"The ID or username of the member to get notifications for.\"], filter: Annotated[str, \"The types of notifications to return (e.g., 'all', 'unread', 'read', 'commentCard', 'addedToCard', 'changeCard').\"] ): \"\"\"Get member notifications by filter. Retrieves a list of a trello member's notifications, filtered by specified types.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get notifications for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_ORGANIZATIONS_BY_ID_MEMBER",
        "description": "Get a specified member's organizations. Fetches organizations a specific trello member belongs to; the idmember must be an id or username of an existing trello member.\", ) def TRELLO_GET_MEMBERS_ORGANIZATIONS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID or username of the member to get organizations for.\"], fields: Annotated[str, \"The fields to retrieve from the organizations (e.g., id, name, displayName, desc, descData, url, website, logoHash, products, powerUps, prefs, billableMemberCount, invitations, invited, limits, memberships, premiumFeatures). Defaults to all.\"] = \"all\", filter: Annotated[str, \"The filter criteria for organizations (e.g., 'all', 'members', 'public', 'private'). Defaults to all.\"] = \"all\", paid_account: Annotated[str | None, \"Whether to filter by paid account status (e.g., 'true', 'false').\"] = None ): \"\"\"Get a specified member's organizations. Fetches organizations a specific trello member belongs to; the idmember must be an id or username of an existing trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get organizations for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_ORGANIZATIONS_BY_ID_MEMBER_BY_FILTER",
        "description": "Get member organizations by filter. Fetches a list of organizations a specific trello member belongs to, using a filter to narrow down the results.\", ) def TRELLO_GET_MEMBERS_ORGANIZATIONS_BY_ID_MEMBER_BY_FILTER( id_member: Annotated[str, \"The ID or username of the member to get organizations for.\"], filter: Annotated[str, \"The filter criteria for organizations (e.g., 'all', 'members', 'public', 'private', 'paid', 'free').\"] ): \"\"\"Get member organizations by filter. Fetches a list of organizations a specific trello member belongs to, using a filter to narrow down the results.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get organizations for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_ORGANIZATIONS_INVITED_BY_ID_MEMBER",
        "description": "Retrieve member's invited organizations. Retrieves organizations a trello member has been invited to but has not yet accepted or declined.\", ) def TRELLO_GET_MEMBERS_ORGANIZATIONS_INVITED_BY_ID_MEMBER( id_member: Annotated[str, \"The ID or username of the member to get invited organizations for.\"], fields: Annotated[str, \"The fields to retrieve from the invited organizations (e.g., id, name, displayName, desc, descData, url, website, logoHash, products, powerUps, prefs, billableMemberCount, invitations, invited, limits, memberships, premiumFeatures). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get invited organizations for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_ORGANIZATIONS_INVITED_BY_ID_MEMBER_BY_FIELD",
        "description": "Get field of member's invited organization. Get a specific field of an organization to which the member has a pending invitation; returns data only if such an invitation exists.\", ) def TRELLO_GET_MEMBERS_ORGANIZATIONS_INVITED_BY_ID_MEMBER_BY_FIELD( id_member: Annotated[str, \"The ID or username of the member to get invited organization field for.\"], field: Annotated[str, \"The specific field to retrieve from the invited organization (e.g., id, name, displayName, desc, url, website, logoHash, prefs, paid_account, billableMemberCount, premiumFeatures).\"] ): \"\"\"Get field of member's invited organization. Get a specific field of an organization to which the member has a pending invitation; returns data only if such an invitation exists.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get invited organization field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_MEMBERS_TOKENS_BY_ID_MEMBER",
        "description": "Retrieve member tokens. Gets api token metadata for a trello member; actual token values are excluded for security.\", ) def TRELLO_GET_MEMBERS_TOKENS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID or username of the member to get tokens for.\"], filter: Annotated[str, \"The filter criteria for tokens (e.g., 'all', 'active', 'expired'). Defaults to all.\"] = \"all",
        "parameters": {
          "id_member": "str (required) - The ID or username of the member to get tokens for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_BY_TOKEN",
        "description": "Get token by token. Retrieves information about a specific trello api token, allowing selection of specific fields and inclusion of webhook details.\", ) def TRELLO_GET_TOKENS_BY_TOKEN( token: Annotated[str, \"The API token to retrieve information for.\"], fields: Annotated[str, \"Specific fields to retrieve. Defaults to all fields.\"] = \"all\", webhooks: Annotated[str, \"Whether to include webhook details. Set to 'true' to include webhooks.\"] = \"false",
        "parameters": {
          "token": "str (required) - The API token to retrieve information for.",
          "fields": "str (required) - Specific fields to retrieve. Defaults to all fields.",
          "webhooks": "str (required) - Whether to include webhook details. Set to 'true' to include webhooks."
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_BY_TOKEN_BY_FIELD",
        "description": "Get token field. Retrieves a specific field from a trello token, provided the token is valid, has necessary permissions, and the field is a valid token field.\", ) def TRELLO_GET_TOKENS_BY_TOKEN_BY_FIELD( token: Annotated[str, \"The API token to retrieve the field from.\"], field: Annotated[str, \"The specific field to retrieve from the token (e.g., id, identifier, permissions, dateCreated, dateExpires, idMember, webhooks).\"] ): \"\"\"Get token field. Retrieves a specific field from a trello token, provided the token is valid, has necessary permissions, and the field is a valid token field.\"\"",
        "parameters": {
          "token": "str (required) - The API token to retrieve the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_MEMBER_BY_TOKEN",
        "description": "Get token member. Retrieves information about the trello member associated with the current api token, allowing customization of the returned fields.\", ) def TRELLO_GET_TOKENS_MEMBER_BY_TOKEN( fields: Annotated[str, \"Specific fields to retrieve from the member. Defaults to all fields.\"] = \"all",
        "parameters": {
          "fields": "str (required) - Specific fields to retrieve from the member. Defaults to all fields."
        }
      },
      {
        "name": "TRELLO_TOKEN_GET_MEMBER_BY_TOKEN",
        "description": "Get token member. Retrieves information for the trello member associated with the api token, with customizable fields. <<deprecated: please use the 'get tokens member by token' action instead.>>\", ) def TRELLO_TOKEN_GET_MEMBER_BY_TOKEN( fields: Annotated[str, \"Specific fields to retrieve from the member. Defaults to all fields.\"] = \"all",
        "parameters": {
          "fields": "str (required) - Specific fields to retrieve from the member. Defaults to all fields."
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_MEMBER_BY_TOKEN_BY_FIELD",
        "description": "Retrieve token member field. Retrieves a specific field for the trello member associated with the provided api token.\", ) def TRELLO_GET_TOKENS_MEMBER_BY_TOKEN_BY_FIELD( field: Annotated[str, \"The specific field to retrieve from the member associated with the current token (e.g., id, username, fullName, initials, avatarHash, email, bio, bioData, confirmed, memberType, url, gravatarHash, uploadedAvatarHash, prefs, trophies, uploadedAvatarId, premiumFeatures, idBoards, idOrganizations, loginTypes, newEmail, oneTimeMessagesDismissed, marketingOptIn, messagesDismissed, tags, savedSearches, idEnterprisesAdmin, idEnterprisesDeactivated, limits, marketingOptInDate, idPremOrgsAdmin, avatarSource, emailUnread).\"] ): \"\"\"Retrieve token member field. Retrieves a specific field for the trello member associated with the provided api token.\"\"",
        "parameters": {
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_WEBHOOKS_BY_TOKEN",
        "description": "Get webhooks for token. Retrieves all webhooks associated with a specific trello api token.\", ) def TRELLO_GET_TOKENS_WEBHOOKS_BY_TOKEN( token: Annotated[str, \"The API token to retrieve webhooks for.\"] ): \"\"\"Get webhooks for token. Retrieves all webhooks associated with a specific trello api token.\"\"",
        "parameters": {
          "token": "str (required) - The API token to retrieve webhooks for."
        }
      },
      {
        "name": "TRELLO_GET_TOKENS_WEBHOOKS_BY_TOKEN_BY_ID_WEBHOOK",
        "description": "Get token webhook by ID. Retrieves detailed information for a specific trello webhook, identified by `idwebhook`, that is associated with the given `token`.\", ) def TRELLO_GET_TOKENS_WEBHOOKS_BY_TOKEN_BY_ID_WEBHOOK( idWebhook: Annotated[str, \"The ID of the webhook to retrieve detailed information for.\"] ): \"\"\"Get token webhook by ID. Retrieves detailed information for a specific trello webhook, identified by `idwebhook`, that is associated with the given `token`.\"\"",
        "parameters": {
          "idWebhook": "str (required) - The ID of the webhook to retrieve detailed information for."
        }
      },
      {
        "name": "TRELLO_GET_TYPES_BY_ID",
        "description": "Get type by id. Retrieves the structural details of a trello object type (e.g., 'action', 'board', 'card') using its identifier; describes the type itself, not specific instances.\", ) def TRELLO_GET_TYPES_BY_ID( id: Annotated[str, \"The identifier of the Trello object type to retrieve structural details for (e.g., 'action', 'board', 'card', 'list', 'member', 'organization', 'webhook').\"] ): \"\"\"Get type by id. Retrieves the structural details of a trello object type (e.g., 'action', 'board', 'card') using its identifier; describes the type itself, not specific instances.\"\"",
        "parameters": {
          "id": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_WEBHOOKS_BY_ID_WEBHOOK",
        "description": "Get webhook by ID. Retrieves the full configuration and status for a specific trello webhook by its unique id; this action does not return past notification history.\", ) def TRELLO_GET_WEBHOOKS_BY_ID_WEBHOOK( idWebhook: Annotated[str, \"The unique ID of the webhook to retrieve full configuration and status for.\"] ): \"\"\"Get webhook by ID. Retrieves the full configuration and status for a specific trello webhook by its unique id; this action does not return past notification history.\"\"",
        "parameters": {
          "idWebhook": "str (required) - The unique ID of the webhook to retrieve full configuration and status for."
        }
      },
      {
        "name": "TRELLO_GET_WEBHOOKS_BY_ID_WEBHOOK_BY_FIELD",
        "description": "Get webhook field by id. Gets a specific field's value from a trello webhook, avoiding retrieval of the full webhook object.\", ) def TRELLO_GET_WEBHOOKS_BY_ID_WEBHOOK_BY_FIELD( idWebhook: Annotated[str, \"The unique ID of the webhook to retrieve the field from.\"], field: Annotated[str, \"The specific field to retrieve from the webhook (e.g., id, callbackURL, idModel, description, active, consecutiveFailures, firstConsecutiveFailDate, dateCreated, dateUpdated, lastAttempt, lastHttpStatus, lastResponse).\"] ): \"\"\"Get webhook field by id. Gets a specific field's value from a trello webhook, avoiding retrieval of the full webhook object.\"\"",
        "parameters": {
          "idWebhook": "str (required) - The unique ID of the webhook to retrieve the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIF_CREATOR_FIELD",
        "description": "Get notification creator field. Fetches a specific field of the member who created the specified trello notification.\", ) def TRELLO_GET_NOTIF_CREATOR_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the creator field for.\"], field: Annotated[str, \"The specific field to retrieve from the notification creator (e.g., id, username, fullName, initials, avatarHash, email, bio, bioData, confirmed, memberType, url, gravatarHash, uploadedAvatarHash, prefs, trophies, uploadedAvatarId, premiumFeatures, idBoards, idOrganizations, loginTypes, newEmail, oneTimeMessagesDismissed, marketingOptIn, messagesDismissed, tags, savedSearches, idEnterprisesAdmin, idEnterprisesDeactivated, limits, marketingOptInDate, idPremOrgsAdmin, avatarSource, emailUnread, loginTypes, newEmail, oneTimeMessagesDismissed, marketingOptIn, messagesDismissed, tags, savedSearches, idEnterprisesAdmin, idEnterprisesDeactivated, limits, marketingOptInDate, idPremOrgsAdmin, avatarSource, emailUnread).\"] ): \"\"\"Get notification creator field. Fetches a specific field of the member who created the specified trello notification.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the creator field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATION_ORG_FIELD",
        "description": "Get notification organization field. Retrieves a specific field from the trello organization associated with a given notification, provided the notification is linked to an organization.\", ) def TRELLO_GET_NOTIFICATION_ORG_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the organization field for.\"], field: Annotated[str, \"The specific field to retrieve from the organization (e.g., id, name, displayName, desc, descData, url, website, logoHash, products, powerUps, idTags, limits, premiumFeatures, creationMethod, billableMemberCount, idMemberCreator, idEnterprise, enterprise, memberships, invitations, invitations_memberships, prefs, labelNames, boards, billableCollaboratorCount, billableCollaboratorCountPerOrganization, idBoards, idMembers, limits, premiumFeatures, creationMethod, billableMemberCount, idMemberCreator, idEnterprise, enterprise, memberships, invitations, invitations_memberships, prefs, labelNames, boards, billableCollaboratorCount, billableCollaboratorCountPerOrganization, idBoards, idMembers).\"] ): \"\"\"Get notification organization field. Retrieves a specific field from the trello organization associated with a given notification, provided the notification is linked to an organization.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the organization field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_BOARD_BY_ID_NOTIFICATION",
        "description": "Get notification board by ID. Gets the trello board associated with a given notification id, returning only board data and allowing selection of specific board fields.\", ) def TRELLO_GET_NOTIFICATIONS_BOARD_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the board for.\"], fields: Annotated[str, \"The fields to retrieve from the board (e.g., id, name, desc, closed, idOrganization, pinned, url, prefs, labelNames, shortLink, powerUps, dateLastActivity, dateLastView, shortUrl, idTags, datePluginDisable, creationMethod, ixUpdate, enterprise, limits, starred, descData, idBoardSource, idMemberCreator, idOrganization, pinned, url, prefs, labelNames, shortLink, powerUps, dateLastActivity, dateLastView, shortUrl, idTags, datePluginDisable, creationMethod, ixUpdate, enterprise, limits, starred, descData, idBoardSource, idMemberCreator). Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the board for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERSHIPS_BY_ID_BOARD_BY_ID_MEMBERSHIP",
        "description": "Get board membership. Retrieves a specific membership on a trello board by its id, optionally including member details.\", ) def TRELLO_GET_BOARDS_MEMBERSHIPS_BY_ID_BOARD_BY_ID_MEMBERSHIP( id_board: Annotated[str, \"The ID of the board containing the membership.\"], id_membership: Annotated[str, \"The ID of the membership to retrieve.\"], member: Annotated[str, \"Include member details.\"] = \"\", member_fields: Annotated[str, \"Comma-separated list of member fields. Defaults to fullName and username.\"] = \"fullName,username",
        "parameters": {
          "id_board": "str (required) - The ID of the board containing the membership.",
          "id_membership": "str (required) - The ID of the membership to retrieve.",
          "member": "str (required) - Include member details.",
          "member_fields": "str (required) - Comma-separated list of member fields. Defaults to fullName and username."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERSHIPS_BY_ID_BOARD",
        "description": "List board memberships. Retrieves trello board memberships (user roles and permissions) for auditing access or managing collaboration, returning only membership data and not other board content.\", ) def TRELLO_GET_BOARDS_MEMBERSHIPS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get memberships from.\"], filter: Annotated[str, \"Filter memberships. Defaults to all.\"] = \"all\", member: Annotated[str, \"Filter by specific member.\"] = \"\", member_fields: Annotated[str, \"Comma-separated list of member fields. Defaults to fullName and username.\"] = \"fullName,username",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get memberships from.",
          "filter": "str (required) - Filter memberships. Defaults to all.",
          "member": "str (required) - Filter by specific member.",
          "member_fields": "str (required) - Comma-separated list of member fields. Defaults to fullName and username."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARD_MEMBERSHIP",
        "description": "Update board membership. Updates a user's role (e.g., admin, normal, observer) on a specific trello board or retrieves updated member details, requiring existing board and membership ids.\", ) def TRELLO_UPDATE_BOARD_MEMBERSHIP( id_board: Annotated[str, \"The ID of the board containing the membership.\"], id_membership: Annotated[str, \"The ID of the membership to update.\"], type: Annotated[str, \"The new role type for the membership (e.g., admin, normal, observer).\"], member_fields: Annotated[str, \"Comma-separated list of member fields to return. Defaults to fullName and username.\"] = \"fullName,username",
        "parameters": {
          "id_board": "str (required) - The ID of the board containing the membership.",
          "id_membership": "str (required) - The ID of the membership to update.",
          "type": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERS_BY_ID_BOARD_BY_FILTER",
        "description": "Get board members filtered. Retrieves members of a trello board using a specified filter, assuming the board exists and the filter is valid.\", ) def TRELLO_GET_BOARDS_MEMBERS_BY_ID_BOARD_BY_FILTER( id_board: Annotated[str, \"The ID of the board to get members from.\"], filter: Annotated[str, \"Filter members by type (e.g., 'normal', 'admins', 'owners').\"] ): \"\"\"Get board members filtered. Retrieves members of a trello board using a specified filter, assuming the board exists and the filter is valid.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get members from.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_MEMBERS_BY_ID_BOARD",
        "description": "Get board members. Retrieves members of a trello board, with options to filter the list and select specific member fields to return.\", ) def TRELLO_GET_BOARDS_MEMBERS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get members from.\"], activity: Annotated[str, \"Include member activity information.\"] = \"\", fields: Annotated[str, \"Comma-separated list of member fields. Defaults to fullName and username.\"] = \"fullName,username\", filter: Annotated[str, \"Filter members. Defaults to normal.\"] = \"normal",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get members from.",
          "activity": "str (required) - Include member activity information.",
          "fields": "str (required) - Comma-separated list of member fields. Defaults to fullName and username.",
          "filter": "str (required) - Filter members. Defaults to normal."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_LISTS_BY_ID_BOARD_BY_FILTER",
        "description": "Get board lists by filter. Fetches lists by status from an accessible trello board; card details for these lists require a separate call.\", ) def TRELLO_GET_BOARDS_LISTS_BY_ID_BOARD_BY_FILTER( id_board: Annotated[str, \"The ID of the board to get lists from.\"], filter: Annotated[str, \"Filter lists by status (e.g., 'open', 'closed', 'all').\"] ): \"\"\"Get board lists by filter. Fetches lists by status from an accessible trello board; card details for these lists require a separate call.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get lists from.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_LISTS_BY_ID_BOARD",
        "description": "Get board's lists. Retrieves lists from a specified trello board, with options to filter lists and include card details.\", ) def TRELLO_GET_BOARDS_LISTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get lists from.\"], card_fields: Annotated[str, \"Comma-separated list of card fields. Defaults to all.\"] = \"all\", cards: Annotated[str, \"Include cards. Defaults to none.\"] = \"none\", fields: Annotated[str, \"Comma-separated list of list fields. Defaults to all.\"] = \"all\", filter: Annotated[str, \"Filter lists. Defaults to open.\"] = \"open",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get lists from.",
          "card_fields": "str (required) - Comma-separated list of card fields. Defaults to all.",
          "cards": "str (required) - Include cards. Defaults to none.",
          "fields": "str (required) - Comma-separated list of list fields. Defaults to all.",
          "filter": "str (required) - Filter lists. Defaults to open."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD_BY_ID_LABEL",
        "description": "Get a board label. Fetches specified fields for a specific label on a trello board; this read-only action does not return information about which cards the label is attached to.\", ) def TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD_BY_ID_LABEL( id_board: Annotated[str, \"The ID of the board containing the label.\"], id_label: Annotated[str, \"The ID of the label to retrieve.\"], fields: Annotated[str, \"Comma-separated list of label fields. Defaults to all.\"] = \"all",
        "parameters": {
          "id_board": "str (required) - The ID of the board containing the label.",
          "id_label": "str (required) - The ID of the label to retrieve.",
          "fields": "str (required) - Comma-separated list of label fields. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD",
        "description": "Get board labels by ID. Fetches labels for a specified trello board, aiding in its organization or label management; this action does not detail per-card label usage.\", ) def TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get labels from.\"], fields: Annotated[str, \"Comma-separated list of label fields. Defaults to all.\"] = \"all\", limit: Annotated[str, \"Maximum number of labels to return. Defaults to 50.\"] = \"50",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get labels from.",
          "fields": "str (required) - Comma-separated list of label fields. Defaults to all.",
          "limit": "str (required) - Maximum number of labels to return. Defaults to 50."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_DELTAS_BY_ID_BOARD",
        "description": "Retrieve board deltas. Retrieves recent changes (deltas) for a trello board by its id, allowing tracking of modifications since a specified update sequence number (`ixlastupdate`).\", ) def TRELLO_GET_BOARDS_DELTAS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get deltas from.\"], ix_last_update: Annotated[str, \"The last update sequence number to track changes since.\"], tags: Annotated[str, \"Comma-separated list of tags to filter deltas.\"] ): \"\"\"Retrieve board deltas. Retrieves recent changes (deltas) for a trello board by its id, allowing tracking of modifications since a specified update sequence number (`ixlastupdate`).\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get deltas from.",
          "ix_last_update": "str (required) - The last update sequence number to track changes since.",
          "tags": "str (required) - Comma-separated list of tags to filter deltas."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_CHECKLISTS_BY_ID_BOARD",
        "description": "Get board checklists. Retrieves checklists (primarily structure/metadata, not detailed item history) from a trello board, with options to include associated card and check item details and to control which fields are returned for each entity.\", ) def TRELLO_GET_BOARDS_CHECKLISTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get checklists from.\"], card_fields: Annotated[str, \"Comma-separated list of card fields. Defaults to all.\"] = \"all\", cards: Annotated[str, \"Include cards. Defaults to none.\"] = \"none\", check_item_fields: Annotated[str, \"Comma-separated list of check item fields. Defaults to name, nameData, pos and state.\"] = \"name,nameData,pos,state\", check_items: Annotated[str, \"Include check items. Defaults to all.\"] = \"all\", fields: Annotated[str, \"Comma-separated list of checklist fields. Defaults to all.\"] = \"all\", filter: Annotated[str, \"Filter checklists. Defaults to all.\"] = \"all",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get checklists from.",
          "card_fields": "str (required) - Comma-separated list of card fields. Defaults to all.",
          "cards": "str (required) - Include cards. Defaults to none.",
          "check_item_fields": "str (required) - Comma-separated list of check item fields. Defaults to name, nameData, pos and state.",
          "check_items": "str (required) - Include check items. Defaults to all.",
          "fields": "str (required) - Comma-separated list of checklist fields. Defaults to all.",
          "filter": "str (required) - Filter checklists. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_CARDS_BY_ID_BOARD_BY_FILTER",
        "description": "Get cards by filter from board. Retrieves cards from a specified trello board, filtered by 'all', 'closed', 'none', 'open', or 'visible'.\", ) def TRELLO_GET_BOARDS_CARDS_BY_ID_BOARD_BY_FILTER( id_board: Annotated[str, \"The ID of the board to get cards from.\"], filter: Annotated[str, \"Filter cards by 'all', 'closed', 'none', 'open', or 'visible'.\"] ): \"\"\"Get cards by filter from board. Retrieves cards from a specified trello board, filtered by 'all', 'closed', 'none', 'open', or 'visible'.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get cards from.",
          "filter": "str (required) - Filter cards by 'all', 'closed', 'none', 'open', or 'visible'."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_CARDS_BY_ID_BOARD",
        "description": "Get cards by board ID. Retrieves cards from an existing trello board, allowing filtering and customization of fields for cards, attachments, and members.\", ) def TRELLO_GET_BOARDS_CARDS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get cards from.\"], actions: Annotated[str, \"Include actions in the response.\"] = \"\", attachment_fields: Annotated[str, \"Comma-separated list of attachment fields. Defaults to all.\"] = \"all\", attachments: Annotated[str, \"Include attachments.\"] = \"\", before: Annotated[str, \"Return cards before this date.\"] = \"\", check_item_states: Annotated[str, \"Include check item states.\"] = \"\", checklists: Annotated[str, \"Include checklists. Defaults to none.\"] = \"none\", fields: Annotated[str, \"Comma-separated list of card fields. Defaults to all.\"] = \"all\", filter: Annotated[str, \"Filter cards. Defaults to visible.\"] = \"visible\", limit: Annotated[str, \"Maximum number of cards to return.\"] = \"\", member_fields: Annotated[str, \"Comma-separated list of member fields. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", members: Annotated[str, \"Include members.\"] = \"\", since: Annotated[str, \"Return cards since this date.\"] = \"\", stickers: Annotated[str, \"Include stickers.\"] = \"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get cards from.",
          "actions": "str (required) - Include actions in the response.",
          "attachment_fields": "str (required) - Comma-separated list of attachment fields. Defaults to all.",
          "attachments": "str (required) - Include attachments.",
          "before": "str (required) - Return cards before this date.",
          "check_item_states": "str (required) - Include check item states.",
          "checklists": "str (required) - Include checklists. Defaults to none.",
          "fields": "str (required) - Comma-separated list of card fields. Defaults to all.",
          "filter": "str (required) - Filter cards. Defaults to visible.",
          "limit": "str (required) - Maximum number of cards to return.",
          "member_fields": "str (required) - Comma-separated list of member fields. Defaults to avatarHash, fullName, initials and username.",
          "members": "str (required) - Include members.",
          "since": "str (required) - Return cards since this date.",
          "stickers": "str (required) - Include stickers."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_BY_ID_BOARD_BY_FIELD",
        "description": "Get board field. Retrieves the value of a single, specified field from a trello board.\", ) def TRELLO_GET_BOARDS_BY_ID_BOARD_BY_FIELD( id_board: Annotated[str, \"The ID of the board to get the field from.\"], field: Annotated[str, \"The specific field to retrieve from the board.\"] ): \"\"\"Get board field. Retrieves the value of a single, specified field from a trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get the field from.",
          "field": "str (required) - The specific field to retrieve from the board."
        }
      },
      {
        "name": "TRELLO_GET_BOARDS_BY_ID_BOARD",
        "description": "Get board by id. Fetches comprehensive details for a specific trello board by its id; this is a read-only action.\", ) def TRELLO_GET_BOARDS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to get details from.\"], action_fields: Annotated[str, \"Comma-separated list of action fields to return. Defaults to all.\"] = \"all\", action_member: Annotated[str, \"Filter actions by member.\"] = \"\", action_member_creator: Annotated[str, \"Filter actions by member creator.\"] = \"\", action_member_creator_fields: Annotated[str, \"Comma-separated list of action member creator fields. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", action_member_fields: Annotated[str, \"Comma-separated list of action member fields. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", actions: Annotated[str, \"Include actions in the response.\"] = \"\", actions_display: Annotated[str, \"Include display-friendly action representations.\"] = \"\", actions_entities: Annotated[str, \"Include action entities.\"] = \"\", actions_format: Annotated[str, \"Format of actions. Defaults to list.\"] = \"list\", actions_limit: Annotated[str, \"Maximum number of actions to return. Defaults to 50.\"] = \"50\", actions_since: Annotated[str, \"Return actions since this date.\"] = \"\", board_stars: Annotated[str, \"Include board stars. Defaults to none.\"] = \"none\", card_attachment_fields: Annotated[str, \"Comma-separated list of card attachment fields. Defaults to all.\"] = \"all\", card_attachments: Annotated[str, \"Include card attachments.\"] = \"\", card_checklists: Annotated[str, \"Include card checklists. Defaults to none.\"] = \"none\", card_fields: Annotated[str, \"Comma-separated list of card fields. Defaults to all.\"] = \"all\", card_stickers: Annotated[str, \"Include card stickers.\"] = \"\", cards: Annotated[str, \"Include cards. Defaults to none.\"] = \"none\", checklist_fields: Annotated[str, \"Comma-separated list of checklist fields. Defaults to all.\"] = \"all\", checklists: Annotated[str, \"Include checklists. Defaults to none.\"] = \"none\", fields: Annotated[str, \"Comma-separated list of board fields. Defaults to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames.\"] = \"name,desc,descData,closed,idOrganization,pinned,url,shortUrl,prefs,labelNames\", label_fields: Annotated[str, \"Comma-separated list of label fields. Defaults to all.\"] = \"all\", labels: Annotated[str, \"Include labels. Defaults to none.\"] = \"none\", labels_limit: Annotated[str, \"Maximum number of labels to return. Defaults to 50.\"] = \"50\", list_fields: Annotated[str, \"Comma-separated list of list fields. Defaults to all.\"] = \"all\", lists: Annotated[str, \"Include lists. Defaults to none.\"] = \"none\", member_fields: Annotated[str, \"Comma-separated list of member fields. Defaults to avatarHash, initials, fullName, username and confirmed.\"] = \"avatarHash,initials,fullName,username,confirmed\", members: Annotated[str, \"Include members. Defaults to none.\"] = \"none\", members_invited: Annotated[str, \"Include invited members. Defaults to none.\"] = \"none\", members_invited_fields: Annotated[str, \"Comma-separated list of invited member fields. Defaults to avatarHash, initials, fullName and username.\"] = \"avatarHash,initials,fullName,username\", memberships: Annotated[str, \"Include memberships. Defaults to none.\"] = \"none\", memberships_member: Annotated[str, \"Include membership member details.\"] = \"\", memberships_member_fields: Annotated[str, \"Comma-separated list of membership member fields. Defaults to fullName and username.\"] = \"fullName,username\", my_prefs: Annotated[str, \"Include user's board preferences.\"] = \"\", organization: Annotated[str, \"Include organization details.\"] = \"\", organization_fields: Annotated[str, \"Comma-separated list of organization fields. Defaults to name and displayName.\"] = \"name,displayName\", organization_memberships: Annotated[str, \"Include organization memberships. Defaults to none.\"] = \"none",
        "parameters": {
          "id_board": "str (required) - The ID of the board to get details from.",
          "action_fields": "str (required) - Comma-separated list of action fields to return. Defaults to all.",
          "action_member": "str (required) - Filter actions by member.",
          "action_member_creator": "str (required) - Filter actions by member creator.",
          "action_member_creator_fields": "str (required) - Comma-separated list of action member creator fields. Defaults to avatarHash, fullName, initials and username.",
          "action_member_fields": "str (required) - Comma-separated list of action member fields. Defaults to avatarHash, fullName, initials and username.",
          "actions": "str (required) - Include actions in the response.",
          "actions_display": "str (required) - Include display-friendly action representations.",
          "actions_entities": "str (required) - Include action entities.",
          "actions_format": "str (required) - Format of actions. Defaults to list.",
          "actions_limit": "str (required) - Maximum number of actions to return. Defaults to 50.",
          "actions_since": "str (required) - Return actions since this date.",
          "board_stars": "str (required) - Include board stars. Defaults to none.",
          "card_attachment_fields": "str (required) - Comma-separated list of card attachment fields. Defaults to all.",
          "card_attachments": "str (required) - Include card attachments.",
          "card_checklists": "str (required) - Include card checklists. Defaults to none.",
          "card_fields": "str (required) - Comma-separated list of card fields. Defaults to all.",
          "card_stickers": "str (required) - Include card stickers.",
          "cards": "str (required) - Include cards. Defaults to none.",
          "checklist_fields": "str (required) - Comma-separated list of checklist fields. Defaults to all.",
          "checklists": "str (required) - Include checklists. Defaults to none.",
          "fields": "str (required) - Comma-separated list of board fields. Defaults to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames.",
          "label_fields": "str (required) - Comma-separated list of label fields. Defaults to all.",
          "labels": "str (required) - Include labels. Defaults to none.",
          "labels_limit": "str (required) - Maximum number of labels to return. Defaults to 50.",
          "list_fields": "str (required) - Comma-separated list of list fields. Defaults to all.",
          "lists": "str (required) - Include lists. Defaults to none.",
          "member_fields": "str (required) - Comma-separated list of member fields. Defaults to avatarHash, initials, fullName, username and confirmed.",
          "members": "str (required) - Include members. Defaults to none.",
          "members_invited": "str (required) - Include invited members. Defaults to none.",
          "members_invited_fields": "str (required) - Comma-separated list of invited member fields. Defaults to avatarHash, initials, fullName and username.",
          "memberships": "str (required) - Include memberships. Defaults to none.",
          "memberships_member": "str (required) - Include membership member details.",
          "memberships_member_fields": "str (required) - Comma-separated list of membership member fields. Defaults to fullName and username.",
          "my_prefs": "str (required) - Include user's board preferences.",
          "organization": "str (required) - Include organization details.",
          "organization_fields": "str (required) - Comma-separated list of organization fields. Defaults to name and displayName.",
          "organization_memberships": "str (required) - Include organization memberships. Defaults to none."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_BY_ID_BOARD",
        "description": "Update board by ID. Updates attributes (e.g., name, description, status, preferences) of an existing trello board identified by `idboard`.\", ) def TRELLO_UPDATE_BOARDS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update.\"], closed: Annotated[str | None, \"Whether the board should be closed/archived (true/false).\"] = None, desc: Annotated[str | None, \"The description of the board.\"] = None, id_board_source: Annotated[str | None, \"The ID of a board to copy settings from.\"] = None, id_organization: Annotated[str | None, \"The ID of the organization to move the board to.\"] = None, keep_from_source: Annotated[str | None, \"What to keep from the source board when copying.\"] = None, label_names__blue: Annotated[str | None, \"The name for the blue label.\"] = None, label_names__green: Annotated[str | None, \"The name for the green label.\"] = None, label_names__orange: Annotated[str | None, \"The name for the orange label.\"] = None, label_names__purple: Annotated[str | None, \"The name for the purple label.\"] = None, label_names__red: Annotated[str | None, \"The name for the red label.\"] = None, label_names__yellow: Annotated[str | None, \"The name for the yellow label.\"] = None, name: Annotated[str | None, \"The name of the board.\"] = None, power_ups: Annotated[str | None, \"The power-ups to enable on the board.\"] = None, prefs__background: Annotated[str | None, \"The background preference for the board.\"] = None, prefs__calendar_feed_enabled: Annotated[str | None, \"Whether calendar feed is enabled (true/false).\"] = None, prefs__card_aging: Annotated[str | None, \"The card aging preference (pirate/regular).\"] = None, prefs__card_covers: Annotated[str | None, \"Whether card covers are enabled (true/false).\"] = None, prefs__comments: Annotated[str | None, \"Who can comment (members/observers/disabled).\"] = None, prefs__invitations: Annotated[str | None, \"Who can invite (members/admins).\"] = None, prefs__permission_level: Annotated[str | None, \"The permission level (private/org/public).\"] = None, prefs__self_join: Annotated[str | None, \"Whether members can join themselves (true/false).\"] = None, prefs__voting: Annotated[str | None, \"Who can vote (members/observers/disabled).\"] = None, prefs_background: Annotated[str | None, \"The background preference for the board (alternative format).\"] = None, prefs_card_aging: Annotated[str | None, \"The card aging preference (alternative format).\"] = None, prefs_card_covers: Annotated[str | None, \"Whether card covers are enabled (alternative format).\"] = None, prefs_comments: Annotated[str | None, \"Who can comment (alternative format).\"] = None, prefs_invitations: Annotated[str | None, \"Who can invite (alternative format).\"] = None, prefs_permission_level: Annotated[str | None, \"The permission level (alternative format).\"] = None, prefs_self_join: Annotated[str | None, \"Whether members can join themselves (alternative format).\"] = None, prefs_voting: Annotated[str | None, \"Who can vote (alternative format).\"] = None, subscribed: Annotated[str | None, \"Whether the user is subscribed to the board (true/false).\"] = None ): \"\"\"Update board by ID. Updates attributes (e.g., name, description, status, preferences) of an existing trello board identified by `idboard`.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update.",
          "closed": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_CLOSED_BY_ID_BOARD",
        "description": "Update board closed status. Archives (closes) an active trello board or reopens a previously archived board.\", ) def TRELLO_UPDATE_BOARDS_CLOSED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to archive or unarchive.\"], value: Annotated[str, \"The closed status: 'true' to archive the board, 'false' to unarchive it.\"] ): \"\"\"Update board closed status. Archives (closes) an active trello board or reopens a previously archived board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to archive or unarchive.",
          "value": "str (required) - The closed status: 'true' to archive the board, 'false' to unarchive it.",
          "status": "'true' to archive the board (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_DESC_BY_ID_BOARD",
        "description": "Update board description. Updates the description of a specified trello board; the update is immediate and does not affect other board elements like lists, cards, or membership.\", ) def TRELLO_UPDATE_BOARDS_DESC_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the description for.\"], value: Annotated[str, \"The new description text for the board.\"] ): \"\"\"Update board description. Updates the description of a specified trello board; the update is immediate and does not affect other board elements like lists, cards, or membership.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the description for.",
          "value": "str (required) - The new description text for the board."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARD_SIDEBAR_ACTIONS_PREFS",
        "description": "Update board sidebar actions preferences. Updates the current user's preference for the visibility of sidebar board actions on a specific trello board.\", ) def TRELLO_UPDATE_BOARD_SIDEBAR_ACTIONS_PREFS( id_board: Annotated[str, \"The ID of the board to update sidebar actions preferences for.\"], value: Annotated[str, \"The preference value for sidebar actions visibility (e.g., 'true' to show, 'false' to hide).\"] ): \"\"\"Update board sidebar actions preferences. Updates the current user's preference for the visibility of sidebar board actions on a specific trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update sidebar actions preferences for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_ID_ORGANIZATION_BY_ID_BOARD",
        "description": "Update board organization. Moves an existing trello board to a specified, existing trello organization, which can affect the board's visibility and member access.\", ) def TRELLO_UPDATE_BOARDS_ID_ORGANIZATION_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to move to a different organization.\"], value: Annotated[str, \"The ID of the organization to move the board to.\"] ): \"\"\"Update board organization. Moves an existing trello board to a specified, existing trello organization, which can affect the board's visibility and member access.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to move to a different organization.",
          "value": "str (required) - The ID of the organization to move the board to."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_BLUE_BY_ID_BOARD",
        "description": "Update a board's blue label name. Sets the name of the blue label for a trello board.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_BLUE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the blue label name for.\"], value: Annotated[str, \"The new name for the blue label.\"] ): \"\"\"Update a board's blue label name. Sets the name of the blue label for a trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the blue label name for.",
          "value": "str (required) - The new name for the blue label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_GREEN_BY_ID_BOARD",
        "description": "Update board's green label name. Updates the name of the green label for a specified trello board; this change is board-wide, affects all cards using this label, and does not change the label's color.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_GREEN_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the green label name for.\"], value: Annotated[str, \"The new name for the green label.\"] ): \"\"\"Update board's green label name. Updates the name of the green label for a specified trello board; this change is board-wide, affects all cards using this label, and does not change the label's color.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the green label name for.",
          "value": "str (required) - The new name for the green label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_ORANGE_BY_ID_BOARD",
        "description": "Update board label orange name. Updates the name of the orange label for a specified trello board, affecting only the label's name, not its color or associated cards.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_ORANGE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the orange label name for.\"], value: Annotated[str, \"The new name for the orange label.\"] ): \"\"\"Update board label orange name. Updates the name of the orange label for a specified trello board, affecting only the label's name, not its color or associated cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the orange label name for.",
          "value": "str (required) - The new name for the orange label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_PURPLE_BY_ID_BOARD",
        "description": "Update purple label name. Updates the name of the purple label on a trello board specified by `idboard`.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_PURPLE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the purple label name for.\"], value: Annotated[str, \"The new name for the purple label.\"] ): \"\"\"Update purple label name. Updates the name of the purple label on a trello board specified by `idboard`.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the purple label name for.",
          "value": "str (required) - The new name for the purple label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_RED_BY_ID_BOARD",
        "description": "Update board label name red. Updates the name of the red label on a specified trello board, without affecting its color or other labels.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_RED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the red label name for.\"], value: Annotated[str, \"The new name for the red label.\"] ): \"\"\"Update board label name red. Updates the name of the red label on a specified trello board, without affecting its color or other labels.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the red label name for.",
          "value": "str (required) - The new name for the red label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_LABEL_NAMES_YELLOW_BY_ID_BOARD",
        "description": "Update yellow label name on board. Updates the name of a board's yellow label; other colored labels are unaffected.\", ) def TRELLO_UPDATE_BOARDS_LABEL_NAMES_YELLOW_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the yellow label name for.\"], value: Annotated[str, \"The new name for the yellow label.\"] ): \"\"\"Update yellow label name on board. Updates the name of a board's yellow label; other colored labels are unaffected.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the yellow label name for.",
          "value": "str (required) - The new name for the yellow label."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MEMBERS_BY_ID_BOARD",
        "description": "Update board members. Adds or updates a member's role on a specific trello board, typically requiring the member's `email` and a membership `type`.\", ) def TRELLO_UPDATE_BOARDS_MEMBERS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to add or update the member on.\"], email: Annotated[str | None, \"The email address of the member to add or update.\"] = None, full_name: Annotated[str | None, \"The full name of the member to add or update.\"] = None, type: Annotated[str | None, \"The membership type (e.g., 'admin', 'normal', 'observer').\"] = None ): \"\"\"Update board members. Adds or updates a member's role on a specific trello board, typically requiring the member's `email` and a membership `type`.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to add or update the member on.",
          "email": "str | None (required) - The email address of the member to add or update.",
          "full_name": "str | None (required) - The full name of the member to add or update.",
          "type": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MEMBERS_BY_ID_BOARD_BY_ID_MEMBER",
        "description": "Update board member attributes. Updates a current member's email, full name, or role (admin, normal, or observer) on a specific trello board; email and full name changes are board-specific and do not affect the member's global trello profile.\", ) def TRELLO_UPDATE_BOARDS_MEMBERS_BY_ID_BOARD_BY_ID_MEMBER( id_board: Annotated[str, \"The ID of the board containing the member.\"], id_member: Annotated[str, \"The ID of the member to update.\"], email: Annotated[str | None, \"The new email address for the member on this board.\"] = None, full_name: Annotated[str | None, \"The new full name for the member on this board.\"] = None, type: Annotated[str | None, \"The new membership type (e.g., 'admin', 'normal', 'observer').\"] = None ): \"\"\"Update board member attributes. Updates a current member's email, full name, or role (admin, normal, or observer) on a specific trello board; email and full name changes are board-specific and do not affect the member's global trello profile.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board containing the member.",
          "id_member": "str (required) - The ID of the member to update.",
          "email": "str | None (required) - The new email address for the member on this board.",
          "full_name": "str | None (required) - The new full name for the member on this board.",
          "type": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_EMAIL_POSITION_BY_ID_BOARD",
        "description": "Modify board email position preference. Updates a trello board's email position preference for new cards; this preference only affects new cards (not existing ones) and the board must exist.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_EMAIL_POSITION_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update email position preference for.\"], value: Annotated[str, \"The email position preference value (e.g., 'top', 'bottom').\"] ): \"\"\"Modify board email position preference. Updates a trello board's email position preference for new cards; this preference only affects new cards (not existing ones) and the board must exist.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update email position preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_ID_EMAIL_LIST_BY_ID_BOARD",
        "description": "Update board email list preference. Sets or disables the default trello list for new cards created via email on a specific board.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_ID_EMAIL_LIST_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update email list preference for.\"], value: Annotated[str, \"The list ID to set as default for email cards, or 'none' to disable the preference.\"] ): \"\"\"Update board email list preference. Sets or disables the default trello list for new cards created via email on a specific board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update email list preference for.",
          "value": "str (required) - The list ID to set as default for email cards, or 'none' to disable the preference."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_ACTIVITY_BY_ID_BOARD",
        "description": "Update my board sidebar activity preference. Sets the current user's preference for displaying or concealing the sidebar activity feed on an accessible trello board; this change only affects the requesting user.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_ACTIVITY_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update sidebar activity preference for.\"], value: Annotated[str, \"The sidebar activity preference value (e.g., 'true' to show, 'false' to hide).\"] ): \"\"\"Update my board sidebar activity preference. Sets the current user's preference for displaying or concealing the sidebar activity feed on an accessible trello board; this change only affects the requesting user.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update sidebar activity preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_BY_ID_BOARD",
        "description": "Update board sidebar visibility. Updates the authenticated user's personal preference for showing or hiding the sidebar on a specific trello board.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update sidebar visibility preference for.\"], value: Annotated[str, \"The sidebar visibility preference value (e.g., 'true' to show, 'false' to hide).\"] ): \"\"\"Update board sidebar visibility. Updates the authenticated user's personal preference for showing or hiding the sidebar on a specific trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update sidebar visibility preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_MEMBERS_BY_ID_BOARD",
        "description": "Update board sidebar members preference. Updates the authenticated user's preference for showing or hiding members in a specific trello board's sidebar, affecting only the current user's view.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_SIDEBAR_MEMBERS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update sidebar members preference for.\"], value: Annotated[str, \"The sidebar members preference value (e.g., 'true' to show, 'false' to hide).\"] ): \"\"\"Update board sidebar members preference. Updates the authenticated user's preference for showing or hiding members in a specific trello board's sidebar, affecting only the current user's view.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update sidebar members preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_LIST_GUIDE_BY_ID_BOARD",
        "description": "Update board show list guide preference. Updates the 'show list guide' preference for a specified trello board, affecting visibility for all users of that board.\", ) def TRELLO_UPDATE_BOARDS_MY_PREFS_SHOW_LIST_GUIDE_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update show list guide preference for.\"], value: Annotated[str, \"The show list guide preference value (e.g., 'true' to show, 'false' to hide).\"] ): \"\"\"Update board show list guide preference. Updates the 'show list guide' preference for a specified trello board, affecting visibility for all users of that board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update show list guide preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_NAME_BY_ID_BOARD",
        "description": "Update board name. Updates the name of an existing trello board, identified by `idboard`; this change only affects the board's name, not its other attributes.\", ) def TRELLO_UPDATE_BOARDS_NAME_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update the name for.\"], value: Annotated[str, \"The new name for the board.\"] ): \"\"\"Update board name. Updates the name of an existing trello board, identified by `idboard`; this change only affects the board's name, not its other attributes.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update the name for.",
          "value": "str (required) - The new name for the board."
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_BACKGROUND_BY_ID_BOARD",
        "description": "Update board background. Updates the cosmetic background preference for a specific trello board; this change does not affect board functionality or content.\", ) def TRELLO_UPDATE_BOARDS_PREFS_BACKGROUND_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update background preference for.\"], value: Annotated[str, \"The background preference value (e.g., 'blue', 'orange', 'green', 'red', 'purple', 'pink', 'lime', 'sky', 'grey', or a custom background ID).\"] ): \"\"\"Update board background. Updates the cosmetic background preference for a specific trello board; this change does not affect board functionality or content.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update background preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_CALENDAR_FEED_ENABLED_BY_ID_BOARD",
        "description": "Update board calendar feed enabled status. Updates the 'calendarfeedenabled' preference for a trello board, which, when enabled, makes board cards with due dates accessible via an icalendar feed for external calendar integration.\", ) def TRELLO_UPDATE_BOARDS_PREFS_CALENDAR_FEED_ENABLED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update calendar feed enabled status for.\"], value: Annotated[str, \"The calendar feed enabled status (e.g., 'true' to enable, 'false' to disable).\"] ): \"\"\"Update board calendar feed enabled status. Updates the 'calendarfeedenabled' preference for a trello board, which, when enabled, makes board cards with due dates accessible via an icalendar feed for external calendar integration.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update calendar feed enabled status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_CARD_AGING_BY_ID_BOARD",
        "description": "Update board card aging preference. Updates the card aging visual preference to 'pirate' or 'regular' mode for a specified trello board.\", ) def TRELLO_UPDATE_BOARDS_PREFS_CARD_AGING_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update card aging preference for.\"], value: Annotated[str, \"The card aging preference value ('pirate' or 'regular').\"] ): \"\"\"Update board card aging preference. Updates the card aging visual preference to 'pirate' or 'regular' mode for a specified trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update card aging preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_CARD_COVERS_BY_ID_BOARD",
        "description": "Update board card cover preference. Updates the preference on a specific trello board for whether existing card covers are displayed; this controls visibility only and does not add or remove the actual covers from cards.\", ) def TRELLO_UPDATE_BOARDS_PREFS_CARD_COVERS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update card cover preference for.\"], value: Annotated[str, \"The card cover preference value (e.g., 'true' to show covers, 'false' to hide covers).\"] ): \"\"\"Update board card cover preference. Updates the preference on a specific trello board for whether existing card covers are displayed; this controls visibility only and does not add or remove the actual covers from cards.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update card cover preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_COMMENTS_BY_ID_BOARD",
        "description": "Update board comment preferences. Changes the permission settings for who can add comments to cards on a specific trello board, without affecting other board settings.\", ) def TRELLO_UPDATE_BOARDS_PREFS_COMMENTS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update comment preferences for.\"], value: Annotated[str, \"The comment permission value (e.g., 'members', 'observers', 'disabled').\"] ): \"\"\"Update board comment preferences. Changes the permission settings for who can add comments to cards on a specific trello board, without affecting other board settings.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update comment preferences for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_INVITATIONS_BY_ID_BOARD",
        "description": "Update board invitation preferences. Updates who can invite new members ('admins' or 'members') to a specific trello board.\", ) def TRELLO_UPDATE_BOARDS_PREFS_INVITATIONS_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update invitation preferences for.\"], value: Annotated[str, \"The invitation permission value ('admins' or 'members').\"] ): \"\"\"Update board invitation preferences. Updates who can invite new members ('admins' or 'members') to a specific trello board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update invitation preferences for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_PERMISSION_LEVEL_BY_ID_BOARD",
        "description": "Update board prefs permission level. Updates the permission level preference (e.g., 'private' or 'public') for a trello board, identified by `idboard`, if the board exists and the authenticated user possesses administrative permissions for it.\", ) def TRELLO_UPDATE_BOARDS_PREFS_PERMISSION_LEVEL_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update permission level preference for.\"], value: Annotated[str, \"The permission level value (e.g., 'private', 'org', 'public').\"] ): \"\"\"Update board prefs permission level. Updates the permission level preference (e.g., 'private' or 'public') for a trello board, identified by `idboard`, if the board exists and the authenticated user possesses administrative permissions for it.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update permission level preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_SELF_JOIN_BY_ID_BOARD",
        "description": "Update board self-join preference. Updates a board's 'selfjoin' preference, determining if members can join freely or must be invited.\", ) def TRELLO_UPDATE_BOARDS_PREFS_SELF_JOIN_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update self-join preference for.\"], value: Annotated[str, \"The self-join preference value (e.g., 'true' to allow self-join, 'false' to require invitation).\"] ): \"\"\"Update board self-join preference. Updates a board's 'selfjoin' preference, determining if members can join freely or must be invited.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update self-join preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_PREFS_VOTING_BY_ID_BOARD",
        "description": "Update board voting preferences. Sets who can vote on cards for an existing trello board, changing only the voting preferences for all cards on the board.\", ) def TRELLO_UPDATE_BOARDS_PREFS_VOTING_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update voting preferences for.\"], value: Annotated[str, \"The voting permission value (e.g., 'members', 'observers', 'disabled').\"] ): \"\"\"Update board voting preferences. Sets who can vote on cards for an existing trello board, changing only the voting preferences for all cards on the board.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update voting preferences for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_BOARDS_SUBSCRIBED_BY_ID_BOARD",
        "description": "Update board subscription status. Updates the authenticated user's subscription status (subscribe/unsubscribe for notifications) for a specified trello board, to which the user must have access.\", ) def TRELLO_UPDATE_BOARDS_SUBSCRIBED_BY_ID_BOARD( id_board: Annotated[str, \"The ID of the board to update subscription status for.\"], value: Annotated[str, \"The subscription status value (e.g., 'true' to subscribe, 'false' to unsubscribe).\"] ): \"\"\"Update board subscription status. Updates the authenticated user's subscription status (subscribe/unsubscribe for notifications) for a specified trello board, to which the user must have access.\"\"",
        "parameters": {
          "id_board": "str (required) - The ID of the board to update subscription status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_BOARD_BY_ID_NOTIFICATION_BY_FIELD",
        "description": "Get notification's board field. Retrieves a specific, valid field from the board associated with a trello notification.\", ) def TRELLO_GET_NOTIFICATIONS_BOARD_BY_ID_NOTIFICATION_BY_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the board field for.\"], field: Annotated[str, \"The specific field to retrieve from the board (e.g., name, desc, url, closed, idOrganization).\"] ): \"\"\"Get notification's board field. Retrieves a specific, valid field from the board associated with a trello notification.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the board field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_BY_ID_NOTIFICATION",
        "description": "Get notification by ID. Retrieves a specific trello notification by its id, optionally including related entities and specific fields for the notification and its related entities.\", ) def TRELLO_GET_NOTIFICATIONS_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to retrieve.\"], board: Annotated[str | None, \"Whether to include board information.\"] = None, board_fields: Annotated[str, \"The fields to retrieve from the board. Defaults to name.\"] = \"name\", card: Annotated[str | None, \"Whether to include card information.\"] = None, card_fields: Annotated[str, \"The fields to retrieve from the card. Defaults to name.\"] = \"name\", display: Annotated[str | None, \"Whether to include display information.\"] = None, entities: Annotated[str | None, \"Whether to include entities in the response.\"] = None, fields: Annotated[str, \"The fields to retrieve from the notification. Defaults to all.\"] = \"all\", list: Annotated[str | None, \"Whether to include list information.\"] = None, member: Annotated[str | None, \"Whether to include member information.\"] = None, member_creator: Annotated[str | None, \"Whether to include member creator information.\"] = None, member_creator_fields: Annotated[str, \"The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[str, \"The fields to retrieve from members. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", organization: Annotated[str | None, \"Whether to include organization information.\"] = None, organization_fields: Annotated[str, \"The fields to retrieve from the organization. Defaults to displayName.\"] = \"displayName",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to retrieve.",
          "board": "str | None (required) - Whether to include board information.",
          "board_fields": "str (required) - The fields to retrieve from the board. Defaults to name.",
          "card": "str | None (required) - Whether to include card information.",
          "card_fields": "str (required) - The fields to retrieve from the card. Defaults to name.",
          "display": "str | None (required) - Whether to include display information.",
          "entities": "str | None (required) - Whether to include entities in the response.",
          "fields": "str (required) - The fields to retrieve from the notification. Defaults to all.",
          "list": "str | None (required) - Whether to include list information.",
          "member": "str | None (required) - Whether to include member information.",
          "member_creator": "str | None (required) - Whether to include member creator information.",
          "member_creator_fields": "str (required) - The fields to retrieve from member creators. Defaults to avatarHash, fullName, initials and username.",
          "member_fields": "str (required) - The fields to retrieve from members. Defaults to avatarHash, fullName, initials and username.",
          "organization": "str | None (required) - Whether to include organization information.",
          "organization_fields": "str (required) - The fields to retrieve from the organization. Defaults to displayName."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_BY_ID_NOTIFICATION_BY_FIELD",
        "description": "Get a notification field. Retrieves a specific field from a trello notification.\", ) def TRELLO_GET_NOTIFICATIONS_BY_ID_NOTIFICATION_BY_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the field from.\"], field: Annotated[str, \"The specific field to retrieve from the notification (e.g., id, type, date, unread, data).\"] ): \"\"\"Get a notification field. Retrieves a specific field from a trello notification.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_DISPLAY_BY_ID_NOTIFICATION",
        "description": "Get notification display by id. Retrieves the information needed to display an existing trello notification, identified by its id, without altering the notification or fetching its complete metadata.\", ) def TRELLO_GET_NOTIFICATIONS_DISPLAY_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get display information for.\"] ): \"\"\"Get notification display by id. Retrieves the information needed to display an existing trello notification, identified by its id, without altering the notification or fetching its complete metadata.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get display information for."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_MEMBER_BY_ID_NOTIFICATION",
        "description": "Get notification member by id. Fetches details of the member (not the notification content itself) associated with a specific trello notification id.\", ) def TRELLO_GET_NOTIFICATIONS_MEMBER_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the member for.\"], fields: Annotated[str, \"The fields to retrieve from the member (e.g., id, username, fullName, initials, avatarHash, bio, bioData, confirmed, memberType, url, gravatarHash, uploadedAvatarHash, prefs, trophies, uploadedAvatarId, premiumFeatures, idBoards, idOrganizations, loginTypes, newEmail, idEnterprisesDeactivated, limits, idTags, avatarUrl, email, idBoardsPinned, ixUpdate, idEnterprisesAdmin, limits, nonPublic, nonPublicAvailable, products, idBoardsPinned, ixUpdate, idEnterprisesAdmin, limits, nonPublic, nonPublicAvailable, products). Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the member for.",
          "fields": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_MEMBER_BY_ID_NOTIFICATION_BY_FIELD",
        "description": "Retrieve notification member field. Retrieves a specific `field` of the trello member associated with the given `idnotification`.\", ) def TRELLO_GET_NOTIFICATIONS_MEMBER_BY_ID_NOTIFICATION_BY_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the member field for.\"], field: Annotated[str, \"The specific field to retrieve from the member (e.g., id, username, fullName, initials, avatarHash, bio, email, url).\"] ): \"\"\"Retrieve notification member field. Retrieves a specific `field` of the trello member associated with the given `idnotification`.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the member field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_MEMBER_CREATOR_BY_ID_NOTIFICATION",
        "description": "Get member creator of a notification. Fetches the creator (member) of a trello notification, identified by `idnotification`, returning only creator details and respecting trello privacy settings and user permissions.\", ) def TRELLO_GET_NOTIFICATIONS_MEMBER_CREATOR_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the member creator for.\"], fields: Annotated[str, \"Fields to return for the member creator. Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the member creator for.",
          "fields": "str (required) - Fields to return for the member creator. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_ORGANIZATION_BY_ID_NOTIFICATION",
        "description": "Get notification organization. Retrieves the trello organization linked to a specific notification id; returns organization details only, not the notification itself.\", ) def TRELLO_GET_NOTIFICATIONS_ORGANIZATION_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the organization for.\"], fields: Annotated[str, \"Fields to return for the organization. Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the organization for.",
          "fields": "str (required) - Fields to return for the organization. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_ENTITIES_BY_ID_NOTIFICATION",
        "description": "Get notification entities by id. Retrieves trello entities (e.g., boards, cards, lists, members) linked to a specific notification id, focusing on the related entities rather than the notification details itself.\", ) def TRELLO_GET_NOTIFICATIONS_ENTITIES_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get entities for.\"] ): \"\"\"Get notification entities by id. Retrieves trello entities (e.g., boards, cards, lists, members) linked to a specific notification id, focusing on the related entities rather than the notification details itself.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get entities for."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_LIST_BY_ID_NOTIFICATION",
        "description": "Retrieve notification list by id. Retrieves details of the trello list associated with a specific notification id.\", ) def TRELLO_GET_NOTIFICATIONS_LIST_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the list for.\"], fields: Annotated[str, \"Fields to return for the list. Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the list for.",
          "fields": "str (required) - Fields to return for the list. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_LIST_BY_ID_NOTIFICATION_BY_FIELD",
        "description": "Get notification list field. Efficiently retrieves a single specified field from a trello list linked to a notification, avoiding fetching the entire list.\", ) def TRELLO_GET_NOTIFICATIONS_LIST_BY_ID_NOTIFICATION_BY_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the list field for.\"], field: Annotated[str, \"The specific field to retrieve from the list (e.g., id, name, closed, pos, idBoard).\"] ): \"\"\"Get notification list field. Efficiently retrieves a single specified field from a trello list linked to a notification, avoiding fetching the entire list.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the list field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_CARD_BY_ID_NOTIFICATION",
        "description": "Get notification's card. Retrieves card details (excluding notification, board, or list data) for a specified trello idnotification, which must exist and be linked to a card.\", ) def TRELLO_GET_NOTIFICATIONS_CARD_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to get the card for.\"], fields: Annotated[str, \"Fields to return for the card. Defaults to all.\"] = \"all",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the card for.",
          "fields": "str (required) - Fields to return for the card. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_NOTIFICATIONS_CARD_BY_ID_NOTIFICATION_BY_FIELD",
        "description": "Get notification card field. Retrieves a specific field of a trello card, using the id of a notification that is directly associated with that card.\", ) def TRELLO_GET_NOTIFICATIONS_CARD_BY_ID_NOTIFICATION_BY_FIELD( id_notification: Annotated[str, \"The ID of the notification to get the card field for.\"], field: Annotated[str, \"The specific field to retrieve from the card (e.g., id, name, desc, closed, pos, idList, idBoard, due, dueComplete, labels, url, shortUrl).\"] ): \"\"\"Get notification card field. Retrieves a specific field of a trello card, using the id of a notification that is directly associated with that card.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to get the card field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_ACTIONS_BY_ID_ORG",
        "description": "Get organization actions by ID. Retrieves a log of actions (e.g., card creations, list movements, comments) for a specified trello organization, filterable by type, date range, and models; `idorg` must be a valid organization id/name, and `page` * `limit` must be < 1000.\", ) def TRELLO_GET_ORGANIZATIONS_ACTIONS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or name of the organization to get actions for.\"], before: Annotated[Optional[str], \"An action ID. Only return actions before this action.\"] = None, display: Annotated[Optional[str], \"Display type for the actions.\"] = None, entities: Annotated[Optional[str], \"Whether to include entities in the response.\"] = None, fields: Annotated[Optional[str], \"Fields to return. Defaults to all.\"] = \"all\", filter: Annotated[Optional[str], \"Filter for specific action types. Defaults to all.\"] = \"all\", format: Annotated[Optional[str], \"Format of the response. Defaults to list.\"] = \"list\", idModels: Annotated[Optional[str], \"Comma-separated list of model IDs to filter by.\"] = None, limit: Annotated[Optional[str], \"Maximum number of actions to return. Defaults to 50.\"] = \"50\", member: Annotated[Optional[str], \"Filter actions by member ID.\"] = None, memberCreator: Annotated[Optional[str], \"Filter actions by member creator ID.\"] = None, memberCreator_fields: Annotated[Optional[str], \"Fields to return for member creator. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", member_fields: Annotated[Optional[str], \"Fields to return for member. Defaults to avatarHash, fullName, initials and username.\"] = \"avatarHash,fullName,initials,username\", page: Annotated[Optional[str], \"Page number for pagination. Defaults to 0.\"] = \"0\", since: Annotated[Optional[str], \"Only return actions since this date (ISO 8601 format).\"] = None ): \"\"\"Get organization actions by ID. Retrieves a log of actions (e.g., card creations, list movements, comments) for a specified trello organization, filterable by type, date range, and models; `idorg` must be a valid organization id/name, and `page` * `limit` must be < 1000.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or name of the organization to get actions for.",
          "before": "str (optional) - An action ID. Only return actions before this action.",
          "display": "str (optional) - Display type for the actions.",
          "entities": "str (optional) - Whether to include entities in the response.",
          "fields": "str (optional) - Fields to return. Defaults to all.",
          "filter": "str (optional) - Filter for specific action types. Defaults to all.",
          "format": "str (optional) - Format of the response. Defaults to list.",
          "idModels": "str (optional) - Comma-separated list of model IDs to filter by.",
          "limit": "str (optional) - Maximum number of actions to return. Defaults to 50.",
          "member": "str (optional) - Filter actions by member ID.",
          "memberCreator": "str (optional) - Filter actions by member creator ID.",
          "memberCreator_fields": "str (optional) - Fields to return for member creator. Defaults to avatarHash, fullName, initials and username.",
          "member_fields": "str (optional) - Fields to return for member. Defaults to avatarHash, fullName, initials and username.",
          "page": "str (optional) - Page number for pagination. Defaults to 0.",
          "since": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_BOARDS_BY_ID_ORG",
        "description": "Get organization boards. Fetches boards for a trello organization, specified by its id or name, with options to filter and customize returned data.\", ) def TRELLO_GET_ORGANIZATIONS_BOARDS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or name of the organization to get boards for.\"], action_fields: Annotated[Optional[str], \"Fields to return for actions. Defaults to all.\"] = \"all\", actions: Annotated[Optional[str], \"Whether to include actions. Defaults to none.\"] = \"none\", actions_entities: Annotated[Optional[str], \"Whether to include action entities.\"] = None, actions_format: Annotated[Optional[str], \"Format for actions. Defaults to list.\"] = \"list\", actions_limit: Annotated[Optional[str], \"Limit for number of actions. Defaults to 5.\"] = \"5\", actions_since: Annotated[Optional[str], \"Only return actions since this date (ISO 8601 format).\"] = None, fields: Annotated[Optional[str], \"Fields to return for boards. Defaults to all.\"] = \"all\", filter: Annotated[Optional[str], \"Filter for specific board types. Defaults to all.\"] = \"all\", lists: Annotated[Optional[str], \"Whether to include lists. Defaults to none.\"] = \"none\", memberships: Annotated[Optional[str], \"Whether to include memberships. Defaults to none.\"] = \"none\", organization: Annotated[Optional[str], \"Whether to include organization info.\"] = None, organization_fields: Annotated[Optional[str], \"Fields to return for organization. Defaults to name and displayName.\"] = \"name,displayName",
        "parameters": {
          "idOrg": "str (required) - The ID or name of the organization to get boards for.",
          "action_fields": "str (optional) - Fields to return for actions. Defaults to all.",
          "actions": "str (optional) - Whether to include actions. Defaults to none.",
          "actions_entities": "str (optional) - Whether to include action entities.",
          "actions_format": "str (optional) - Format for actions. Defaults to list.",
          "actions_limit": "str (optional) - Limit for number of actions. Defaults to 5.",
          "actions_since": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_BOARDS_BY_ID_ORG_BY_FILTER",
        "description": "Get organization boards by filter. Fetches a list of boards belonging to a specific trello organization, filtered by a given criterion.\", ) def TRELLO_GET_ORGANIZATIONS_BOARDS_BY_ID_ORG_BY_FILTER( idOrg: Annotated[str, \"The ID or name of the organization to get boards for.\"], filter: Annotated[str, \"The filter criterion to apply to the boards (e.g., 'open', 'closed', 'all', 'starred', 'members', 'organization', 'public', 'private').\"] ): \"\"\"Get organization boards by filter. Fetches a list of boards belonging to a specific trello organization, filtered by a given criterion.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or name of the organization to get boards for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_BY_ID_ORG",
        "description": "Get organization by ID. Retrieves detailed information about a specific trello organization, including optional related resources like members, boards, and actions, using its id or unique name.\", ) def TRELLO_GET_ORGANIZATIONS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or unique name of the organization to retrieve.\"], action_fields: Annotated[Optional[str], \"Fields to return for actions. Defaults to all.\"] = \"all\", actions: Annotated[Optional[str], \"Whether to include actions. Defaults to none.\"] = \"none\", actions_display: Annotated[Optional[str], \"Whether to include action display information.\"] = None, actions_entities: Annotated[Optional[str], \"Whether to include action entities.\"] = None, actions_limit: Annotated[Optional[str], \"Limit for number of actions. Defaults to 50.\"] = \"50\", board_action_fields: Annotated[Optional[str], \"Fields to return for board actions. Defaults to all.\"] = \"all\", board_actions: Annotated[Optional[str], \"Whether to include board actions.\"] = None, board_actions_display: Annotated[Optional[str], \"Whether to include board action display information.\"] = None, board_actions_entities: Annotated[Optional[str], \"Whether to include board action entities.\"] = None, board_actions_format: Annotated[Optional[str], \"Format for board actions. Defaults to list.\"] = \"list\", board_actions_limit: Annotated[Optional[str], \"Limit for number of board actions. Defaults to 50.\"] = \"50\", board_actions_since: Annotated[Optional[str], \"Only return board actions since this date (ISO 8601 format).\"] = None, board_fields: Annotated[Optional[str], \"Fields to return for boards. Defaults to all.\"] = \"all\", board_lists: Annotated[Optional[str], \"Whether to include board lists. Defaults to open.\"] = \"open\", boards: Annotated[Optional[str], \"Whether to include boards. Defaults to none.\"] = \"none\", fields: Annotated[Optional[str], \"Fields to return for organization. Defaults to name, displayName, desc, descData, url, website, logoHash, products and powerUps.\"] = \"name,displayName,desc,descData,url,website,logoHash,products,powerUps\", member_activity: Annotated[Optional[str], \"Whether to include member activity.\"] = None, member_fields: Annotated[Optional[str], \"Fields to return for members. Defaults to avatarHash, fullName, initials, username and confirmed.\"] = \"avatarHash,fullName,initials,username,confirmed\", members: Annotated[Optional[str], \"Whether to include members. Defaults to none.\"] = \"none\", membersInvited: Annotated[Optional[str], \"Whether to include invited members. Defaults to none.\"] = \"none\", membersInvited_fields: Annotated[Optional[str], \"Fields to return for invited members. Defaults to avatarHash, initials, fullName and username.\"] = \"avatarHash,initials,fullName,username\", memberships: Annotated[Optional[str], \"Whether to include memberships. Defaults to none.\"] = \"none\", memberships_member: Annotated[Optional[str], \"Whether to include membership member information.\"] = None, memberships_member_fields: Annotated[Optional[str], \"Fields to return for membership members. Defaults to fullName and username.\"] = \"fullName,username\", paid_account: Annotated[Optional[str], \"Whether to include paid account information.\"] = None ): \"\"\"Get organization by ID. Retrieves detailed information about a specific trello organization, including optional related resources like members, boards, and actions, using its id or unique name.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to retrieve.",
          "action_fields": "str (optional) - Fields to return for actions. Defaults to all.",
          "actions": "str (optional) - Whether to include actions. Defaults to none.",
          "actions_display": "str (optional) - Whether to include action display information.",
          "actions_entities": "str (optional) - Whether to include action entities.",
          "actions_limit": "str (optional) - Limit for number of actions. Defaults to 50.",
          "board_action_fields": "str (optional) - Fields to return for board actions. Defaults to all.",
          "board_actions": "str (optional) - Whether to include board actions.",
          "board_actions_display": "str (optional) - Whether to include board action display information.",
          "board_actions_entities": "str (optional) - Whether to include board action entities.",
          "board_actions_format": "str (optional) - Format for board actions. Defaults to list.",
          "board_actions_limit": "str (optional) - Limit for number of board actions. Defaults to 50.",
          "board_actions_since": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_BY_ID_ORG_BY_FIELD",
        "description": "Get organization field by id. Retrieves the value of a single specified `field` for a trello organization `idorg`, ideal for efficiently fetching a specific piece of information without loading the full organization details.\", ) def TRELLO_GET_ORGANIZATIONS_BY_ID_ORG_BY_FIELD( idOrg: Annotated[str, \"The ID or unique name of the organization to retrieve the field from.\"], field: Annotated[str, \"The specific field to retrieve from the organization (e.g., 'name', 'displayName', 'desc', 'url', 'website', 'logoHash', 'id', 'descData', 'products', 'powerUps', 'prefs', 'premiumFeatures', 'billableMemberCount', 'idTags', 'dateLastActivity', 'dateLastView', 'idBoards', 'invited', 'invitations', 'memberships', 'pinned', 'url', 'website', 'logoHash', 'products', 'powerUps', 'prefs', 'premiumFeatures', 'billableMemberCount', 'idTags', 'dateLastActivity', 'dateLastView', 'idBoards', 'invited', 'invitations', 'memberships', 'pinned').\"] ): \"\"\"Get organization field by id. Retrieves the value of a single specified `field` for a trello organization `idorg`, ideal for efficiently fetching a specific piece of information without loading the full organization details.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to retrieve the field from.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_DELTAS_BY_ID_ORG",
        "description": "Get organization deltas by id. Retrieves a log of recent modifications (deltas) for a trello organization, filterable by tags and supporting incremental fetching via an update index.\", ) def TRELLO_GET_ORGANIZATIONS_DELTAS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or unique name of the organization to get deltas for.\"], ixLastUpdate: Annotated[str, \"The index of the last update to start fetching from (for incremental updates). Use '0' for the first request.\"], tags: Annotated[str, \"Comma-separated list of tags to filter deltas by (e.g., 'board,card,list,member,action'). Use 'all' to get all types of deltas.\"] ): \"\"\"Get organization deltas by id. Retrieves a log of recent modifications (deltas) for a trello organization, filterable by tags and supporting incremental fetching via an update index.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get deltas for.",
          "ixLastUpdate": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERS_BY_ID_ORG",
        "description": "Retrieve organization members by id. Retrieves members of a trello organization (specified by id or name), with an option to include member activity if the organization is premium.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or unique name of the organization to get members for.\"], activity: Annotated[Optional[str], \"Whether to include member activity (only available for premium organizations).\"] = None, fields: Annotated[Optional[str], \"Fields to return for members. Defaults to fullName and username.\"] = \"fullName,username\", filter: Annotated[Optional[str], \"Filter for member types. Defaults to normal.\"] = \"normal",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get members for.",
          "activity": "Annotated[Optional[str] (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERS_BY_ID_ORG_BY_FILTER",
        "description": "Get organization members by filter. Fetches members of a specified trello organization using a filter like 'all', 'normal', 'admins', or 'owners'.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERS_BY_ID_ORG_BY_FILTER( idOrg: Annotated[str, \"The ID or unique name of the organization to get members for.\"], filter: Annotated[str, \"The filter to apply to members (e.g., 'all', 'normal', 'admins', 'owners').\"] ): \"\"\"Get organization members by filter. Fetches members of a specified trello organization using a filter like 'all', 'normal', 'admins', or 'owners'.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get members for.",
          "filter": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERSHIPS_BY_ID_ORG",
        "description": "Get organization memberships. Fetches organization-level memberships for a trello organization, with options to filter members and include their details; does not return board-specific memberships.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERSHIPS_BY_ID_ORG( idOrg: Annotated[str, \"The ID or unique name of the organization to get memberships for.\"], filter: Annotated[Optional[str], \"Filter for membership types. Defaults to all.\"] = \"all\", member: Annotated[Optional[str], \"Whether to include member details. Defaults to none.\"] = None, member_fields: Annotated[Optional[str], \"Fields to return for members. Defaults to fullName and username.\"] = \"fullName,username",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get memberships for.",
          "filter": "str (optional) - Filter for membership types. Defaults to all.",
          "member": "str (optional) - Whether to include member details. Defaults to none.",
          "member_fields": "str (optional) - Fields to return for members. Defaults to fullName and username."
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERSHIPS_BY_ID_ORG_BY_ID_MEMBERSHIP",
        "description": "Get organization membership. Retrieves a specific membership within a trello organization, using their respective ids, to ascertain the member's role, status, or permissions.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERSHIPS_BY_ID_ORG_BY_ID_MEMBERSHIP( idOrg: Annotated[str, \"The ID or unique name of the organization.\"], idMembership: Annotated[str, \"The ID of the specific membership to retrieve.\"], member: Annotated[Optional[str], \"Whether to include member details. Defaults to none.\"] = None, member_fields: Annotated[Optional[str], \"Fields to return for member. Defaults to fullName and username.\"] = \"fullName,username",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization.",
          "idMembership": "str (required) - The ID of the specific membership to retrieve.",
          "member": "str (optional) - Whether to include member details. Defaults to none.",
          "member_fields": "str (optional) - Fields to return for member. Defaults to fullName and username."
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERS_INVITED_BY_ID_ORG",
        "description": "Get invited organization members. Retrieves members invited to a trello organization who have not yet accepted their invitation, returning only data for pending invitations (not active or former members) and cannot send or modify invitations.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERS_INVITED_BY_ID_ORG( idOrg: Annotated[str, \"The ID or unique name of the organization to get invited members for.\"], fields: Annotated[Optional[str], \"Fields to return for invited members. Defaults to all.\"] = \"all",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get invited members for.",
          "fields": "str (optional) - Fields to return for invited members. Defaults to all."
        }
      },
      {
        "name": "TRELLO_GET_ORGANIZATIONS_MEMBERS_INVITED_BY_ID_ORG_BY_FIELD",
        "description": "Get organization invited member field. Retrieves a specific `field` (e.g., fullname, username, email, status) for members with pending invitations to the trello organization specified by `idorg`.\", ) def TRELLO_GET_ORGANIZATIONS_MEMBERS_INVITED_BY_ID_ORG_BY_FIELD( idOrg: Annotated[str, \"The ID or unique name of the organization to get invited member field for.\"], field: Annotated[str, \"The specific field to retrieve for invited members (e.g., 'fullName', 'username', 'email', 'id', 'initials', 'avatarHash', 'bio', 'confirmed', 'memberType', 'url').\"] ): \"\"\"Get organization invited member field. Retrieves a specific `field` (e.g., fullname, username, email, status) for members with pending invitations to the trello organization specified by `idorg`.\"\"",
        "parameters": {
          "idOrg": "str (required) - The ID or unique name of the organization to get invited member field for.",
          "field": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_GET_SEARCH_MEMBERS",
        "description": "Search for members. Searches trello members by name, username, or email, optionally scoped to a board or organization.\", ) def TRELLO_GET_SEARCH_MEMBERS( query: Annotated[str, \"The search query to find members by name, username, or email.\"], idBoard: Annotated[Optional[str], \"Optional board ID to limit search to members of that board.\"] = None, idOrganization: Annotated[Optional[str], \"Optional organization ID to limit search to members of that organization.\"] = None, limit: Annotated[Optional[str], \"Maximum number of members to return. Defaults to 8.\"] = \"8\", onlyOrgMembers: Annotated[Optional[str], \"Whether to only return organization members. Defaults to false.\"] = None ): \"\"\"Search for members. Searches trello members by name, username, or email, optionally scoped to a board or organization.\"\"",
        "parameters": {
          "query": "str (required) - The search query to find members by name, username, or email.",
          "idBoard": "str (optional) - Optional board ID to limit search to members of that board.",
          "idOrganization": "str (optional) - Optional organization ID to limit search to members of that organization.",
          "limit": "str (optional) - Maximum number of members to return. Defaults to 8.",
          "onlyOrgMembers": "str (optional) - Whether to only return organization members. Defaults to false."
        }
      },
      {
        "name": "TRELLO_GET_SESSIONS_SOCKET",
        "description": "Get sessions socket. Note: Trello WebSocket functionality is not officially supported and has been deprecated. This tool provides information about alternatives for real-time updates.\", ) def TRELLO_GET_SESSIONS_SOCKET(): \"\"\"Get sessions socket. Note: Trello WebSocket functionality is not officially supported and has been deprecated. This tool provides information about alternatives for real-time updates.\"\"",
        "parameters": {}
      },
      {
        "name": "TRELLO_UPDATE_BOARD_STAR_POSITION",
        "description": "Update board star position. Updates the display position of a specific starred board for a trello member (referenced by `idmember` or 'me') using its `idboardstar`, allowing reordering to 'top', 'bottom', or a specific positive numerical position (as a string).\", ) def TRELLO_UPDATE_BOARD_STAR_POSITION( id_board_star: Annotated[str, \"The ID of the board star to update position for.\"], id_member: Annotated[str, \"The ID of the member (or 'me' for current user) who owns the board star.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or a positive numerical position as string).\"] ): \"\"\"Update board star position. Updates the display position of a specific starred board for a trello member (referenced by `idmember` or 'me') using its `idboardstar`, allowing reordering to 'top', 'bottom', or a specific positive numerical position (as a string).\"\"",
        "parameters": {
          "id_board_star": "str (required) - The ID of the board star to update position for.",
          "id_member": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARD_CHECKLIST_ITEM_POSITION",
        "description": "Update checklist item position. Updates the position of a check item within a checklist on a trello card; the new position can be 'top', 'bottom', or a positive integer.\", ) def TRELLO_UPDATE_CARD_CHECKLIST_ITEM_POSITION( id_card: Annotated[str, \"The ID of the card containing the checklist.\"], id_checklist: Annotated[str, \"The ID of the checklist containing the check item.\"], id_check_item: Annotated[str, \"The ID of the check item to update position for.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or a positive integer as string).\"] ): \"\"\"Update checklist item position. Updates the position of a check item within a checklist on a trello card; the new position can be 'top', 'bottom', or a positive integer.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist.",
          "id_checklist": "str (required) - The ID of the checklist containing the check item.",
          "id_check_item": "str (required) - The ID of the check item to update position for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARD_CHECKLIST_ITEM_STATE_BY_IDS",
        "description": "Update card checklist item state. Updates the state of a specific check item on a trello card's checklist, only affecting its completion status and no other properties.\", ) def TRELLO_UPDATE_CARD_CHECKLIST_ITEM_STATE_BY_IDS( id_card: Annotated[str, \"The ID of the card containing the checklist.\"], id_checklist: Annotated[str, \"The ID of the checklist containing the check item.\"], id_check_item: Annotated[str, \"The ID of the check item to update state for.\"], value: Annotated[str, \"The new state value ('true' to complete, 'false' to uncomplete).\"] ): \"\"\"Update card checklist item state. Updates the state of a specific check item on a trello card's checklist, only affecting its completion status and no other properties.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist.",
          "id_checklist": "str (required) - The ID of the checklist containing the check item.",
          "id_check_item": "str (required) - The ID of the check item to update state for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARD_COMMENT",
        "description": "Update card comment. Updates the text for a given comment action (`idaction`) on a specified card (`idcard`), affecting only the text content.\", ) def TRELLO_UPDATE_CARD_COMMENT( id_action: Annotated[str, \"The ID of the comment action to update.\"], id_card: Annotated[str, \"The ID of the card containing the comment.\"], text: Annotated[str, \"The new text content for the comment.\"] ): \"\"\"Update card comment. Updates the text for a given comment action (`idaction`) on a specified card (`idcard`), affecting only the text content.\"\"",
        "parameters": {
          "id_action": "str (required) - The ID of the comment action to update.",
          "id_card": "str (required) - The ID of the card containing the comment.",
          "text": "str (required) - The new text content for the comment."
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_CLOSED_BY_ID_CARD",
        "description": "Update card closed status by id. Updates the 'closed' status of an existing trello card.\", ) def TRELLO_UPDATE_CARDS_CLOSED_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update closed status for.\"], value: Annotated[str, \"The closed status value ('true' to archive/close, 'false' to unarchive/open).\"] ): \"\"\"Update card closed status by id. Updates the 'closed' status of an existing trello card.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update closed status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_DESC_BY_ID_CARD",
        "description": "Update card description. Updates or clears the entire description of an existing trello card; use an empty string for `value` to clear.\", ) def TRELLO_UPDATE_CARDS_DESC_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update description for.\"], value: Annotated[str, \"The new description text for the card (use empty string to clear).\"] ): \"\"\"Update card description. Updates or clears the entire description of an existing trello card; use an empty string for `value` to clear.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update description for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_DUE_BY_ID_CARD",
        "description": "Update card due date. Updates the due date of a specific trello card; the card identified by `idcard` must exist.\", ) def TRELLO_UPDATE_CARDS_DUE_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update due date for.\"], value: Annotated[str, \"The new due date value (ISO 8601 format like '2024-12-31T23:59:59.000Z' or 'null' to clear).\"] ): \"\"\"Update card due date. Updates the due date of a specific trello card; the card identified by `idcard` must exist.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update due date for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_ID_BOARD_BY_ID_CARD",
        "description": "Move card to board. Moves a trello card to a different board and, optionally, to a specific list on that new board, useful for reorganizing across projects or workflows.\", ) def TRELLO_UPDATE_CARDS_ID_BOARD_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to move.\"], value: Annotated[str, \"The ID of the destination board to move the card to.\"], id_list: Annotated[str, \"The ID of the destination list on the new board (optional).\"] ): \"\"\"Move card to board. Moves a trello card to a different board and, optionally, to a specific list on that new board, useful for reorganizing across projects or workflows.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to move.",
          "value": "str (required) - The ID of the destination board to move the card to.",
          "id_list": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_ID_LIST_BY_ID_CARD",
        "description": "Update card list ID. Moves a trello card to a different list on the same trello board; this operation is idempotent and only updates the card's list id.\", ) def TRELLO_UPDATE_CARDS_ID_LIST_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to move to a different list.\"], value: Annotated[str, \"The ID of the destination list to move the card to.\"] ): \"\"\"Update card list ID. Moves a trello card to a different list on the same trello board; this operation is idempotent and only updates the card's list id.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to move to a different list.",
          "value": "str (required) - The ID of the destination list to move the card to."
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_ID_MEMBERS_BY_ID_CARD",
        "description": "Add member to card. Adds a member to a trello card, appending their id to the card's list of member ids; the card must exist and the member must have board permissions.\", ) def TRELLO_UPDATE_CARDS_ID_MEMBERS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add a member to.\"], value: Annotated[str, \"The ID of the member to add to the card.\"] ): \"\"\"Add member to card. Adds a member to a trello card, appending their id to the card's list of member ids; the card must exist and the member must have board permissions.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add a member to.",
          "value": "str (required) - The ID of the member to add to the card."
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_LABELS_BY_ID_CARD",
        "description": "Add labels to card. Adds labels to an existing trello card using label IDs. Get label IDs using TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD. Note: This tool adds labels, it doesn't replace existing ones.\", ) def TRELLO_UPDATE_CARDS_LABELS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to add labels to.\"], value: Annotated[str, \"The label ID to add to the card. Get label IDs using TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD.\"] ): \"\"\"Add labels to card. Adds labels to an existing trello card using label IDs. Get label IDs using TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD. Note: This tool adds labels, it doesn't replace existing ones.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to add labels to.",
          "value": "str (required) - The label ID to add to the card. Get label IDs using TRELLO_GET_BOARDS_LABELS_BY_ID_BOARD."
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_NAME_BY_ID_CARD",
        "description": "Update card name. Updates the name of an existing trello card, identified by its id or shortlink; other card properties remain unchanged.\", ) def TRELLO_UPDATE_CARDS_NAME_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update name for.\"], value: Annotated[str, \"The new name for the card.\"] ): \"\"\"Update card name. Updates the name of an existing trello card, identified by its id or shortlink; other card properties remain unchanged.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update name for.",
          "value": "str (required) - The new name for the card."
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_POS_BY_ID_CARD",
        "description": "Update card position. Updates a trello card's position within its list to 'top', 'bottom', or a specified 1-indexed positive integer.\", ) def TRELLO_UPDATE_CARDS_POS_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update position for.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or a positive integer as string).\"] ): \"\"\"Update card position. Updates a trello card's position within its list to 'top', 'bottom', or a specified 1-indexed positive integer.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update position for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CARDS_SUBSCRIBED_BY_ID_CARD",
        "description": "Update card subscribed status. Updates the user's subscription status for a trello card, if the card exists and is accessible.\", ) def TRELLO_UPDATE_CARDS_SUBSCRIBED_BY_ID_CARD( id_card: Annotated[str, \"The ID of the card to update subscription status for.\"], value: Annotated[str, \"The subscription status value ('true' to subscribe, 'false' to unsubscribe).\"] ): \"\"\"Update card subscribed status. Updates the user's subscription status for a trello card, if the card exists and is accessible.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card to update subscription status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLIST_ITEM_BY_IDS",
        "description": "Update a checklist item. Updates a check item's attributes (name, position, state) or moves it to a different checklist on the same card, requiring the card id, current checklist id, and check item id.\", ) def TRELLO_UPDATE_CHECKLIST_ITEM_BY_IDS( id_card: Annotated[str, \"The ID of the card containing the checklist item.\"], id_check_item: Annotated[str, \"The ID of the check item to update.\"], id_checklist_current: Annotated[str, \"The ID of the current checklist containing the item.\"], id_checklist: Annotated[str | None, \"The ID of the destination checklist (if moving the item).\"] = None, name: Annotated[str | None, \"The new name for the check item.\"] = None, pos: Annotated[str | None, \"The new position for the check item ('top', 'bottom', or positive integer).\"] = None, state: Annotated[str | None, \"The new state for the check item ('true' to complete, 'false' to uncomplete).\"] = None ): \"\"\"Update a checklist item. Updates a check item's attributes (name, position, state) or moves it to a different checklist on the same card, requiring the card id, current checklist id, and check item id.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist item.",
          "id_check_item": "str (required) - The ID of the check item to update.",
          "id_checklist_current": "str (required) - The ID of the current checklist containing the item.",
          "id_checklist": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_REMOVE_CHECKLIST_ITEM_FROM_CARD_BY_IDS",
        "description": "Remove checklist item. Permanently deletes a specific checklist item from a checklist on a trello card using their respective ids.\", ) def TRELLO_REMOVE_CHECKLIST_ITEM_FROM_CARD_BY_IDS( id_card: Annotated[str, \"The ID of the card containing the checklist item.\"], id_check_item: Annotated[str, \"The ID of the check item to remove.\"], id_checklist: Annotated[str, \"The ID of the checklist containing the check item.\"] ): \"\"\"Remove checklist item. Permanently deletes a specific checklist item from a checklist on a trello card using their respective ids.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist item.",
          "id_check_item": "str (required) - The ID of the check item to remove.",
          "id_checklist": "str (required) - The ID of the checklist containing the check item."
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLIST_ITEM_NAME_IN_CARD",
        "description": "Update checklist item name in card. Updates the name of a specific check item on a checklist within a trello card, provided the card, checklist, and check item all exist.\", ) def TRELLO_UPDATE_CHECKLIST_ITEM_NAME_IN_CARD( id_card: Annotated[str, \"The ID of the card containing the checklist item.\"], id_check_item: Annotated[str, \"The ID of the check item to update name for.\"], id_checklist: Annotated[str, \"The ID of the checklist containing the check item.\"], value: Annotated[str, \"The new name for the check item.\"] ): \"\"\"Update checklist item name in card. Updates the name of a specific check item on a checklist within a trello card, provided the card, checklist, and check item all exist.\"\"",
        "parameters": {
          "id_card": "str (required) - The ID of the card containing the checklist item.",
          "id_check_item": "str (required) - The ID of the check item to update name for.",
          "id_checklist": "str (required) - The ID of the checklist containing the check item.",
          "value": "str (required) - The new name for the check item."
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLISTS_BY_ID_CHECKLIST",
        "description": "Update checklist. Updates an existing trello checklist, allowing modification of its name, position, associated card/board, or copying items from a source checklist.\", ) def TRELLO_UPDATE_CHECKLISTS_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to update.\"], name: Annotated[str, \"The new name for the checklist.\"], pos: Annotated[str, \"The new position for the checklist ('top', 'bottom', or positive integer).\"], id_card: Annotated[str, \"The ID of the card to move the checklist to.\"], id_board: Annotated[str, \"The ID of the board to move the checklist to.\"], id_checklist_source: Annotated[str, \"The ID of the source checklist to copy items from.\"] ): \"\"\"Update checklist. Updates an existing trello checklist, allowing modification of its name, position, associated card/board, or copying items from a source checklist.\"\"",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to update.",
          "name": "str (required) - The new name for the checklist.",
          "pos": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLISTS_ID_CARD_BY_ID_CHECKLIST",
        "description": "Move checklist to card. Attempts to move a trello checklist to a new parent card; NOTE: This feature is not supported by the Trello API and will return an error. Use TRELLO_ADD_CHECKLISTS_BY_ID_CARD to create a new checklist instead.\", ) def TRELLO_UPDATE_CHECKLISTS_ID_CARD_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to move.\"], value: Annotated[str, \"The ID of the destination card to move the checklist to.\"] ): \"\"\"Move checklist to card. Attempts to move a trello checklist to a new parent card; NOTE: This feature is not supported by the Trello API and will return an error. Use TRELLO_ADD_CHECKLISTS_BY_ID_CARD to create a new checklist instead.\"\"",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to move.",
          "value": "str (required) - The ID of the destination card to move the checklist to."
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLISTS_NAME_BY_ID_CHECKLIST",
        "description": "Update checklist name. Updates the name of an existing trello checklist.\", ) def TRELLO_UPDATE_CHECKLISTS_NAME_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to update name for.\"], value: Annotated[str, \"The new name for the checklist.\"] ): \"\"\"Update checklist name. Updates the name of an existing trello checklist.\"\"",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to update name for.",
          "value": "str (required) - The new name for the checklist."
        }
      },
      {
        "name": "TRELLO_UPDATE_CHECKLISTS_POS_BY_ID_CHECKLIST",
        "description": "Update checklist position by id. Updates the position of an existing checklist on a trello card.\", ) def TRELLO_UPDATE_CHECKLISTS_POS_BY_ID_CHECKLIST( id_checklist: Annotated[str, \"The ID of the checklist to update position for.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or a positive integer as string).\"] ): \"\"\"Update checklist position by id. Updates the position of an existing checklist on a trello card.\"\"",
        "parameters": {
          "id_checklist": "str (required) - The ID of the checklist to update position for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LABELS_BY_ID_LABEL",
        "description": "Update label attributes. Updates an existing trello label's attributes (color, name, or associated board) by its id; the label must exist.\", ) def TRELLO_UPDATE_LABELS_BY_ID_LABEL( id_label: Annotated[str, \"The ID of the label to update.\"], name: Annotated[str, \"The new name for the label.\"] = None, color: Annotated[str, \"The new color for the label (red, yellow, orange, green, blue, purple, pink, sky, lime, black, grey, or null).\"] = None, id_board: Annotated[str, \"The ID of the board to associate the label with.\"] = None ): \"\"\"Update label attributes. Updates an existing trello label's attributes (color, name, or associated board) by its id; the label must exist.\"\"",
        "parameters": {
          "id_label": "str (required) - The ID of the label to update.",
          "name": "str (required) - The new name for the label.",
          "color": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LABELS_COLOR_BY_ID_LABEL",
        "description": "Update label color. Updates the color of an existing trello label, or removes its color if 'null' is specified for the value.\", ) def TRELLO_UPDATE_LABELS_COLOR_BY_ID_LABEL( id_label: Annotated[str, \"The ID of the label to update color for.\"], value: Annotated[str, \"The new color for the label (red, yellow, orange, green, blue, purple, pink, sky, lime, black, grey, or null to remove color).\"] ): \"\"\"Update label color. Updates the color of an existing trello label, or removes its color if 'null' is specified for the value.\"\"",
        "parameters": {
          "id_label": "str (required) - The ID of the label to update color for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LABELS_NAME_BY_ID_LABEL",
        "description": "Update label name. Updates the name of an existing trello label, identified by `idlabel`; an empty string for `value` clears the label's name but does not delete the label.\", ) def TRELLO_UPDATE_LABELS_NAME_BY_ID_LABEL( id_label: Annotated[str, \"The ID of the label to update name for.\"], value: Annotated[str, \"The new name for the label (empty string to clear the name).\"] ): \"\"\"Update label name. Updates the name of an existing trello label, identified by `idlabel`; an empty string for `value` clears the label's name but does not delete the label.\"\"",
        "parameters": {
          "id_label": "str (required) - The ID of the label to update name for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_BY_ID_LIST",
        "description": "Update list attributes. Updates attributes of an existing trello list, such as name, position, archive status, board, or copies cards from another list, provided the list `idlist` exists.\", ) def TRELLO_UPDATE_LISTS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to update.\"], name: Annotated[str | None, \"The new name for the list.\"] = None, pos: Annotated[str | None, \"The new position for the list ('top', 'bottom', or positive integer).\"] = None, closed: Annotated[str | None, \"The archive status ('true' to archive, 'false' to unarchive).\"] = None, subscribed: Annotated[str | None, \"The subscription status ('true' to subscribe, 'false' to unsubscribe).\"] = None, id_board: Annotated[str | None, \"The ID of the board to move the list to.\"] = None, id_list_source: Annotated[str | None, \"The ID of the source list to copy cards from.\"] = None ): \"\"\"Update list attributes. Updates attributes of an existing trello list, such as name, position, archive status, board, or copies cards from another list, provided the list `idlist` exists.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to update.",
          "name": "str | None (required) - The new name for the list.",
          "pos": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_CLOSED_BY_ID_LIST",
        "description": "Update lists closed status. Updates whether an existing trello list is closed (archived); a closed list is hidden from the board view but not deleted and can be re-opened.\", ) def TRELLO_UPDATE_LISTS_CLOSED_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to update closed status for.\"], value: Annotated[str, \"The closed status value ('true' to archive, 'false' to unarchive).\"] ): \"\"\"Update lists closed status. Updates whether an existing trello list is closed (archived); a closed list is hidden from the board view but not deleted and can be re-opened.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to update closed status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_ID_BOARD_BY_ID_LIST",
        "description": "Move list to board. Moves an existing trello list (identified by `idlist`) to an existing destination board (board id in `value`), optionally setting its new position (`pos`).\", ) def TRELLO_UPDATE_LISTS_ID_BOARD_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to move.\"], value: Annotated[str, \"The ID of the destination board to move the list to.\"], pos: Annotated[str, \"The new position for the list on the destination board ('top', 'bottom', or positive integer).\"] = None ): \"\"\"Move list to board. Moves an existing trello list (identified by `idlist`) to an existing destination board (board id in `value`), optionally setting its new position (`pos`).\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to move.",
          "value": "str (required) - The ID of the destination board to move the list to.",
          "pos": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_NAME_BY_ID_LIST",
        "description": "Update list name. Updates the name of an existing trello list, identified by its id; this only changes the list's name, not its cards or position.\", ) def TRELLO_UPDATE_LISTS_NAME_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to update name for.\"], value: Annotated[str, \"The new name for the list.\"] ): \"\"\"Update list name. Updates the name of an existing trello list, identified by its id; this only changes the list's name, not its cards or position.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to update name for.",
          "value": "str (required) - The new name for the list."
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_POS_BY_ID_LIST",
        "description": "Update list position. Changes a trello list's order on a board to 'top', 'bottom', or a specified numeric position, affecting only its position.\", ) def TRELLO_UPDATE_LISTS_POS_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to update position for.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or a positive integer as string).\"] ): \"\"\"Update list position. Changes a trello list's order on a board to 'top', 'bottom', or a specified numeric position, affecting only its position.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to update position for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_LISTS_SUBSCRIBED_BY_ID_LIST",
        "description": "Update list subscription. Updates the subscription status for a trello list, allowing the user to subscribe or unsubscribe to control notifications.\", ) def TRELLO_UPDATE_LISTS_SUBSCRIBED_BY_ID_LIST( id_list: Annotated[str, \"The ID of the list to update subscription status for.\"], value: Annotated[str, \"The subscription status value ('true' to subscribe, 'false' to unsubscribe).\"] ): \"\"\"Update list subscription. Updates the subscription status for a trello list, allowing the user to subscribe or unsubscribe to control notifications.\"\"",
        "parameters": {
          "id_list": "str (required) - The ID of the list to update subscription status for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_SAVED_SEARCH",
        "description": "Update member saved search. Updates an existing trello member's saved search (name, position, or query) identified by idmember and idsavedsearch.\", ) def TRELLO_UPDATE_MEMBER_SAVED_SEARCH( id_member: Annotated[str, \"The ID of the member who owns the saved search.\"], id_saved_search: Annotated[str, \"The ID of the saved search to update.\"], name: Annotated[str | None, \"The new name for the saved search.\"] = None, pos: Annotated[str | None, \"The new position for the saved search ('top', 'bottom', or positive integer).\"] = None, query: Annotated[str | None, \"The new query for the saved search.\"] = None ): \"\"\"Update member saved search. Updates an existing trello member's saved search (name, position, or query) identified by idmember and idsavedsearch.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the saved search.",
          "id_saved_search": "str (required) - The ID of the saved search to update.",
          "name": "str | None (required) - The new name for the saved search.",
          "pos": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_SAVED_SEARCH_NAME",
        "description": "Update member saved search name. Updates a trello member's saved search display name (not its criteria), identified by idmember and idsavedsearch; the search must exist and belong to the member.\", ) def TRELLO_UPDATE_MEMBER_SAVED_SEARCH_NAME( id_member: Annotated[str, \"The ID of the member who owns the saved search.\"], id_saved_search: Annotated[str, \"The ID of the saved search to update name for.\"], value: Annotated[str, \"The new display name for the saved search.\"] ): \"\"\"Update member saved search name. Updates a trello member's saved search display name (not its criteria), identified by idmember and idsavedsearch; the search must exist and belong to the member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the saved search.",
          "id_saved_search": "str (required) - The ID of the saved search to update name for.",
          "value": "str (required) - The new display name for the saved search."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_SAVED_SEARCH_POS",
        "description": "Update member saved search position. Updates the position of a specified saved search for a trello member; other attributes of the saved search or member remain unchanged.\", ) def TRELLO_UPDATE_MEMBER_SAVED_SEARCH_POS( id_member: Annotated[str, \"The ID of the member who owns the saved search.\"], id_saved_search: Annotated[str, \"The ID of the saved search to update position for.\"], value: Annotated[str, \"The new position value ('top', 'bottom', or positive integer as string).\"] ): \"\"\"Update member saved search position. Updates the position of a specified saved search for a trello member; other attributes of the saved search or member remain unchanged.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the saved search.",
          "id_saved_search": "str (required) - The ID of the saved search to update position for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_SAVED_SEARCH_QUERY",
        "description": "Update member saved search query. Updates the query string of an existing saved search for a trello member.\", ) def TRELLO_UPDATE_MEMBER_SAVED_SEARCH_QUERY( id_member: Annotated[str, \"The ID of the member who owns the saved search.\"], id_saved_search: Annotated[str, \"The ID of the saved search to update query for.\"], value: Annotated[str, \"The new query string for the saved search.\"] ): \"\"\"Update member saved search query. Updates the query string of an existing saved search for a trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the saved search.",
          "id_saved_search": "str (required) - The ID of the saved search to update query for.",
          "value": "str (required) - The new query string for the saved search."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_BIO_BY_ID_MEMBER",
        "description": "Update member bio. Updates the bio of a specified trello member. Note: This feature may not be supported by Trello's API due to privacy restrictions.\", ) def TRELLO_UPDATE_MEMBERS_BIO_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update bio for.\"], value: Annotated[str, \"The new bio text for the member.\"] ): \"\"\"Update member bio. Updates the bio of a specified trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update bio for.",
          "value": "str (required) - The new bio text for the member."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_BOARD_BACKGROUND",
        "description": "Update Member Board Background. Updates an existing board background's properties (brightness, image file, or tiling) for a specified trello member, using their id and the board background id.\", ) def TRELLO_UPDATE_MEMBER_BOARD_BACKGROUND( id_member: Annotated[str, \"The ID of the member who owns the board background.\"], id_board_background: Annotated[str, \"The ID of the board background to update.\"], brightness: Annotated[str | None, \"The brightness level for the background ('dark', 'light', or 'normal').\"] = None, file: Annotated[str | None, \"The image file for the background.\"] = None, tile: Annotated[str | None, \"Whether the background should be tiled ('true' or 'false').\"] = None ): \"\"\"Update Member Board Background. Updates an existing board background's properties (brightness, image file, or tiling) for a specified trello member, using their id and the board background id.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the board background.",
          "id_board_background": "str (required) - The ID of the board background to update.",
          "brightness": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_BY_ID_MEMBER",
        "description": "Update member by ID. Updates an existing trello member's profile information, preferences, or username. Note: This requires special token permissions beyond standard read/write access.\", ) def TRELLO_UPDATE_MEMBERS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update.\"], avatar_source: Annotated[str | None, \"The source for the member's avatar (e.g., 'gravatar', 'upload').\"] = None, bio: Annotated[str | None, \"The member's bio/description.\"] = None, full_name: Annotated[str | None, \"The member's full name.\"] = None, initials: Annotated[str | None, \"The member's initials.\"] = None, prefs__color_blind: Annotated[str | None, \"Color blind preference ('true' or 'false').\"] = None, prefs__locale: Annotated[str | None, \"The member's locale preference (e.g., 'en', 'es', 'fr').\"] = None, prefs__minutes_between_summaries: Annotated[str | None, \"Minutes between email summaries (e.g., '60', '1440').\"] = None, username: Annotated[str | None, \"The member's username.\"] = None ): \"\"\"Update member by ID. Updates an existing trello member's profile information, preferences, or username.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update.",
          "avatar_source": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_S_CUSTOM_BOARD_BACKGROUNDS",
        "description": "Update member's custom board background. Updates a specific existing custom board background for a trello member.\", ) def TRELLO_UPDATE_MEMBER_S_CUSTOM_BOARD_BACKGROUNDS( id_member: Annotated[str, \"The ID of the member who owns the board background.\"], id_board_background: Annotated[str, \"The ID of the board background to update.\"], brightness: Annotated[str | None, \"The brightness level for the background ('dark', 'light', or 'normal').\"] = None, file: Annotated[str | None, \"The image file for the background.\"] = None, tile: Annotated[str | None, \"Whether the background should be tiled ('true' or 'false').\"] = None ): \"\"\"Update member's custom board background. Updates a specific existing custom board background for a trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the board background.",
          "id_board_background": "str (required) - The ID of the board background to update.",
          "brightness": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_REMOVE_SPECIFIC_MEMBER_S_BOARD_BACKGROUNDS",
        "description": "Remove member's custom board background. Permanently deletes a specific custom board background (identified by `idboardbackground`) associated with an existing trello member (identified by `idmember`).\", ) def TRELLO_REMOVE_SPECIFIC_MEMBER_S_BOARD_BACKGROUNDS( id_member: Annotated[str, \"The ID of the member who owns the board background.\"], id_board_background: Annotated[str, \"The ID of the board background to remove.\"] ): \"\"\"Remove member's custom board background. Permanently deletes a specific custom board background (identified by `idboardbackground`) associated with an existing trello member (identified by `idmember`).\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member who owns the board background.",
          "id_board_background": "str (required) - The ID of the board background to remove."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_FULL_NAME_BY_ID_MEMBER",
        "description": "Update member full name by id. Updates the full name for a trello member, identified by their valid id or username; this operation only affects the full name, leaving other profile information unchanged.\", ) def TRELLO_UPDATE_MEMBERS_FULL_NAME_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the full name for.\"], value: Annotated[str, \"The new full name for the member.\"] ): \"\"\"Update member full name by id. Updates the full name for a trello member, identified by their valid id or username; this operation only affects the full name, leaving other profile information unchanged.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the full name for.",
          "value": "str (required) - The new full name for the member."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_INITIALS_BY_ID_MEMBER",
        "description": "Update member initials. Updates the initials for a specified trello member, identified by their id or username.\", ) def TRELLO_UPDATE_MEMBERS_INITIALS_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the initials for.\"], value: Annotated[str, \"The new initials for the member.\"] ): \"\"\"Update member initials. Updates the initials for a specified trello member, identified by their id or username.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the initials for.",
          "value": "str (required) - The new initials for the member."
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_AVATAR_SOURCE_BY_ID_MEMBER",
        "description": "Update member avatar source. Updates the avatar source for a specified trello member.\", ) def TRELLO_UPDATE_MEMBERS_AVATAR_SOURCE_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the avatar source for.\"], value: Annotated[str, \"The new avatar source for the member (e.g., 'gravatar', 'upload').\"] ): \"\"\"Update member avatar source. Updates the avatar source for a specified trello member.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the avatar source for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_PREFS_COLOR_BLIND_BY_ID_MEMBER",
        "description": "Update member color blind preference. Updates a trello member's color blind preference, which only changes their specific display without affecting others.\", ) def TRELLO_UPDATE_MEMBERS_PREFS_COLOR_BLIND_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the color blind preference for.\"], value: Annotated[str, \"The color blind preference value ('true' or 'false').\"] ): \"\"\"Update member color blind preference. Updates a trello member's color blind preference, which only changes their specific display without affecting others.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the color blind preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_PREFS_LOCALE_BY_ID_MEMBER",
        "description": "Update member locale preference. Updates a trello member's locale preference; affects date/time display (not existing content translation) and an empty `value` may reset to default.\", ) def TRELLO_UPDATE_MEMBERS_PREFS_LOCALE_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the locale preference for.\"], value: Annotated[str, \"The locale preference value (e.g., 'en', 'es', 'fr', 'de', 'it', 'pt', 'ru', 'ja', 'ko', 'zh').\"] ): \"\"\"Update member locale preference. Updates a trello member's locale preference; affects date/time display (not existing content translation) and an empty `value` may reset to default.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the locale preference for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBER_SUMMARY_INTERVAL",
        "description": "Update Member Summary Interval. Updates a trello member's preference for the frequency of email summary notifications; this setting affects only summary notifications.\", ) def TRELLO_UPDATE_MEMBER_SUMMARY_INTERVAL( id_member: Annotated[str, \"The ID of the member to update the summary interval for.\"], value: Annotated[str, \"The summary interval value in minutes (e.g., '60', '1440', '10080').\"] ): \"\"\"Update Member Summary Interval. Updates a trello member's preference for the frequency of email summary notifications; this setting affects only summary notifications.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the summary interval for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_MEMBERS_USERNAME_BY_ID_MEMBER",
        "description": "Update member username. Updates the username for an existing trello member, identified by their id or current username.\", ) def TRELLO_UPDATE_MEMBERS_USERNAME_BY_ID_MEMBER( id_member: Annotated[str, \"The ID of the member to update the username for.\"], value: Annotated[str | None, \"The new username for the member (optional).\"] = None ): \"\"\"Update member username. Updates the username for an existing trello member, identified by their id or current username.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update the username for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_NOTIFICATIONS_BY_ID_NOTIFICATION",
        "description": "Update notification status by id. Updates only the 'unread' status of a specific trello notification.\", ) def TRELLO_UPDATE_NOTIFICATIONS_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to update.\"], unread: Annotated[str, \"The unread status ('true' or 'false').\"] ): \"\"\"Update notification status by id. Updates only the 'unread' status of a specific trello notification.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to update.",
          "unread": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_NOTIFICATIONS_UNREAD_BY_ID_NOTIFICATION",
        "description": "Update notification unread status. Marks an existing and accessible trello notification as read or unread.\", ) def TRELLO_UPDATE_NOTIFICATIONS_UNREAD_BY_ID_NOTIFICATION( id_notification: Annotated[str, \"The ID of the notification to update.\"], value: Annotated[str, \"The unread status value ('true' or 'false').\"] ): \"\"\"Update notification unread status. Marks an existing and accessible trello notification as read or unread.\"\"",
        "parameters": {
          "id_notification": "str (required) - The ID of the notification to update.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_BY_ID_ORG",
        "description": "Update organization attributes. Updates various attributes of an existing trello organization, identified by `idorg`.\", ) def TRELLO_UPDATE_ORGANIZATIONS_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update.\"], desc: Annotated[str | None, \"The description of the organization.\"] = None, display_name: Annotated[str | None, \"The display name of the organization.\"] = None, name: Annotated[str | None, \"The name of the organization.\"] = None, prefs__associated_domain: Annotated[str | None, \"The associated domain for the organization.\"] = None, prefs__board_visibility_restrict__org: Annotated[str | None, \"Board visibility restriction for organization ('admin', 'none').\"] = None, prefs__board_visibility_restrict__private: Annotated[str | None, \"Board visibility restriction for private ('admin', 'none').\"] = None, prefs__board_visibility_restrict__public: Annotated[str | None, \"Board visibility restriction for public ('admin', 'none').\"] = None, prefs__external_members_disabled: Annotated[str | None, \"Whether external members are disabled ('true' or 'false').\"] = None, prefs__google_apps_version: Annotated[str | None, \"Google Apps version for the organization.\"] = None, prefs__org_invite_restrict: Annotated[str | None, \"Organization invite restriction ('admins', 'all').\"] = None, prefs__permission_level: Annotated[str | None, \"Permission level ('private', 'org', 'public').\"] = None, website: Annotated[str | None, \"The website URL of the organization.\"] = None ): \"\"\"Update organization attributes. Updates various attributes of an existing trello organization, identified by `idorg`.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update.",
          "desc": "str | None (required) - The description of the organization.",
          "display_name": "str | None (required) - The display name of the organization.",
          "name": "str | None (required) - The name of the organization.",
          "prefs__associated_domain": "str | None (required) - The associated domain for the organization.",
          "prefs__board_visibility_restrict__org": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_DESC_BY_ID_ORG",
        "description": "Update organization description. Updates or clears the description for an existing trello organization, identified by its id or name, to a new string up to 16384 characters.\", ) def TRELLO_UPDATE_ORGANIZATIONS_DESC_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the description for.\"], value: Annotated[str | None, \"The new description for the organization (up to 16384 characters).\"] = None ): \"\"\"Update organization description. Updates or clears the description for an existing trello organization, identified by its id or name, to a new string up to 16384 characters.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the description for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_DISPLAY_NAME_BY_ID_ORG",
        "description": "Update organization display name. Updates the display name of a trello organization, identifiable by its current id or name (`idorg`), to the new `value`; other attributes remain unaffected.\", ) def TRELLO_UPDATE_ORGANIZATIONS_DISPLAY_NAME_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the display name for.\"], value: Annotated[str | None, \"The new display name for the organization.\"] = None ): \"\"\"Update organization display name. Updates the display name of a trello organization, identifiable by its current id or name (`idorg`), to the new `value`; other attributes remain unaffected.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the display name for.",
          "value": "str | None (required) - The new display name for the organization."
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_MEMBERS_BY_ID_ORG",
        "description": "Update an organization member. Adds/updates a member in a specified trello organization (`idorg`); `email` and `type` are api-required, `fullname` is needed if `email` is new to trello.\", ) def TRELLO_UPDATE_ORGANIZATIONS_MEMBERS_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to add/update the member in.\"], email: Annotated[str | None, \"The email address of the member to add/update.\"] = None, type: Annotated[str | None, \"The membership type ('admin', 'normal', 'observer').\"] = None, full_name: Annotated[str | None, \"The full name of the member (required if email is new to Trello).\"] = None ): \"\"\"Update an organization member. Adds/updates a member in a specified trello organization (`idorg`); `email` and `type` are api-required, `fullname` is needed if `email` is new to trello.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to add/update the member in.",
          "email": "str | None (required) - The email address of the member to add/update.",
          "type": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_MEMBERS_BY_ID_ORG_BY_ID_MEMBER",
        "description": "Update organization member. Updates a member's details (email, full name, or type) in a trello organization, applying changes only to the fields provided.\", ) def TRELLO_UPDATE_ORGANIZATIONS_MEMBERS_BY_ID_ORG_BY_ID_MEMBER( id_org: Annotated[str, \"The ID of the organization containing the member.\"], id_member: Annotated[str, \"The ID of the member to update.\"], email: Annotated[str | None, \"The new email address for the member.\"] = None, full_name: Annotated[str | None, \"The new full name for the member.\"] = None, type: Annotated[str | None, \"The new membership type ('admin', 'normal', 'observer').\"] = None ): \"\"\"Update organization member. Updates a member's details (email, full name, or type) in a trello organization, applying changes only to the fields provided.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization containing the member.",
          "id_member": "str (required) - The ID of the member to update.",
          "email": "str | None (required) - The new email address for the member.",
          "full_name": "str | None (required) - The new full name for the member.",
          "type": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_NAME_BY_ID_ORG",
        "description": "Update organization name by id. Updates the unique programmatic identifier (used in urls and api interactions) for an existing trello organization; this is an irreversible operation, effective immediately, and only affects this identifier.\", ) def TRELLO_UPDATE_ORGANIZATIONS_NAME_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the name for.\"], value: Annotated[str | None, \"The new programmatic name for the organization.\"] = None ): \"\"\"Update organization name by id. Updates the unique programmatic identifier (used in urls and api interactions) for an existing trello organization; this is an irreversible operation, effective immediately, and only affects this identifier.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the name for.",
          "value": "str | None (required) - The new programmatic name for the organization."
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_PREFS_GOOGLE_APPS_VERSION_BY_ID_ORG",
        "description": "Update organization Google Apps version. Updates the google apps integration version preference for a specified trello organization, to manage compatibility or features related to google workspace services.\", ) def TRELLO_UPDATE_ORGANIZATIONS_PREFS_GOOGLE_APPS_VERSION_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the Google Apps version for.\"], value: Annotated[str | None, \"The Google Apps version for the organization.\"] = None ): \"\"\"Update organization Google Apps version. Updates the google apps integration version preference for a specified trello organization, to manage compatibility or features related to google workspace services.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the Google Apps version for.",
          "value": "str | None (required) - The Google Apps version for the organization."
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_PREFS_ORG_INVITE_RESTRICT_BY_ID_ORG",
        "description": "Update organization invite restriction. Modifies a trello organization's invitation policy using an email, domain, or keyword rule, affecting only future invites, not existing members.\", ) def TRELLO_UPDATE_ORGANIZATIONS_PREFS_ORG_INVITE_RESTRICT_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the invite restriction for.\"], value: Annotated[str | None, \"The invite restriction rule (email, domain, or keyword).\"] = None ): \"\"\"Update organization invite restriction. Modifies a trello organization's invitation policy using an email, domain, or keyword rule, affecting only future invites, not existing members.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the invite restriction for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_PREFS_PERMISSION_LEVEL_BY_ID_ORG",
        "description": "Update organization permission level. Updates a trello organization's `permissionlevel` preference, determining if it's members-only or link-accessible, and affecting new board default visibility.\", ) def TRELLO_UPDATE_ORGANIZATIONS_PREFS_PERMISSION_LEVEL_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the permission level for.\"], value: Annotated[str | None, \"The permission level ('private', 'org', 'public').\"] = None ): \"\"\"Update organization permission level. Updates a trello organization's `permissionlevel` preference, determining if it's members-only or link-accessible, and affecting new board default visibility.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the permission level for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORGANIZATIONS_WEBSITE_BY_ID_ORG",
        "description": "Update organization website. Updates the website url for a specified trello organization.\", ) def TRELLO_UPDATE_ORGANIZATIONS_WEBSITE_BY_ID_ORG( id_org: Annotated[str, \"The ID of the organization to update the website for.\"], value: Annotated[str | None, \"The new website URL for the organization.\"] = None ): \"\"\"Update organization website. Updates the website url for a specified trello organization.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the website for.",
          "value": "str | None (required) - The new website URL for the organization."
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_ASSOCIATED_DOMAIN_PREFS",
        "description": "Update an organization's associated domain preferences. Updates or removes the google workspace domain associated with a trello organization, often to configure features like sso or automatic user provisioning.\", ) def TRELLO_UPDATE_ORG_ASSOCIATED_DOMAIN_PREFS( id_org: Annotated[str, \"The ID of the organization to update the associated domain for.\"], value: Annotated[str | None, \"The associated domain for the organization (e.g., 'company.com').\"] = None ): \"\"\"Update an organization's associated domain preferences. Updates or removes the google workspace domain associated with a trello organization, often to configure features like sso or automatic user provisioning.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the associated domain for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_BOARD_VISIBILITY",
        "description": "Update organization board visibility preference. Updates the preference controlling who can set board visibility to 'organization-visible' within an existing trello organization.\", ) def TRELLO_UPDATE_ORG_BOARD_VISIBILITY( id_org: Annotated[str, \"The ID of the organization to update the board visibility preference for.\"], value: Annotated[str | None, \"The board visibility restriction ('admin' or 'none').\"] = None ): \"\"\"Update organization board visibility preference. Updates the preference controlling who can set board visibility to 'organization-visible' within an existing trello organization.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update the board visibility preference for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_EXTERNAL_MEMBERS_ACCESS",
        "description": "Update an organization's external members access. Updates the 'externalmembersdisabled' preference for a trello organization to control whether non-members can be added to its boards.\", ) def TRELLO_UPDATE_ORG_EXTERNAL_MEMBERS_ACCESS( id_org: Annotated[str, \"The ID of the organization to update external members access for.\"], value: Annotated[str | None, \"Whether to disable external members ('true' or 'false').\"] = None ): \"\"\"Update an organization's external members access. Updates the 'externalmembersdisabled' preference for a trello organization to control whether non-members can be added to its boards.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update external members access for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_MEMBER_DEACTIVATION",
        "description": "Update org member deactivation status. Updates a member's deactivation status in an organization; 'true' deactivates (suspends access temporarily), 'false' reactivates.\", ) def TRELLO_UPDATE_ORG_MEMBER_DEACTIVATION( id_member: Annotated[str, \"The ID of the member to update deactivation status for.\"], id_org: Annotated[str, \"The ID of the organization the member belongs to.\"], value: Annotated[str | None, \"Whether to deactivate the member ('true' or 'false').\"] = None ): \"\"\"Update org member deactivation status. Updates a member's deactivation status in an organization; 'true' deactivates (suspends access temporarily), 'false' reactivates.\"\"",
        "parameters": {
          "id_member": "str (required) - The ID of the member to update deactivation status for.",
          "id_org": "str (required) - The ID of the organization the member belongs to.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_MEMBERSHIP",
        "description": "Update org membership. Updates a trello organization member's type to 'admin', 'normal', or 'observer', using the organization and membership ids.\", ) def TRELLO_UPDATE_ORG_MEMBERSHIP( id_membership: Annotated[str, \"The ID of the membership to update.\"], id_org: Annotated[str, \"The ID of the organization the membership belongs to.\"], type: Annotated[str | None, \"The new membership type ('admin', 'normal', or 'observer').\"] = None, member_fields: Annotated[str | None, \"Comma-separated list of member fields to return.\"] = None ): \"\"\"Update org membership. Updates a trello organization member's type to 'admin', 'normal', or 'observer', using the organization and membership ids.\"\"",
        "parameters": {
          "id_membership": "str (required) - The ID of the membership to update.",
          "id_org": "str (required) - The ID of the organization the membership belongs to.",
          "type": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_PRIVATE_BOARD_VISIBILITY",
        "description": "Update organization private board visibility restriction. Updates the organization's preference controlling who is permitted to change the visibility of its private boards; requires admin privileges for the organization.\", ) def TRELLO_UPDATE_ORG_PRIVATE_BOARD_VISIBILITY( id_org: Annotated[str, \"The ID of the organization to update private board visibility restriction for.\"], value: Annotated[str | None, \"The private board visibility restriction ('admin' or 'none').\"] = None ): \"\"\"Update organization private board visibility restriction. Updates the organization's preference controlling who is permitted to change the visibility of its private boards; requires admin privileges for the organization.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update private board visibility restriction for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_ORG_PUBLIC_BOARD_VISIBILITY",
        "description": "Update organization public board visibility. Updates the restriction on who can set board visibility to public for a specified trello organization.\", ) def TRELLO_UPDATE_ORG_PUBLIC_BOARD_VISIBILITY( id_org: Annotated[str, \"The ID of the organization to update public board visibility for.\"], value: Annotated[str | None, \"The public board visibility restriction ('admin' or 'none').\"] = None ): \"\"\"Update organization public board visibility. Updates the restriction on who can set board visibility to public for a specified trello organization.\"\"",
        "parameters": {
          "id_org": "str (required) - The ID of the organization to update public board visibility for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_SESSIONS_BY_ID_SESSION",
        "description": "Update session by id. Updates a trello user session's viewed board id or status; call when user activity or board focus changes.\", ) def TRELLO_UPDATE_SESSIONS_BY_ID_SESSION( id_session: Annotated[str, \"The ID of the session to update.\"], id_board: Annotated[str | None, \"The ID of the board the user is viewing.\"] = None, status: Annotated[str | None, \"The status of the session.\"] = None ): \"\"\"Update session by id. Updates a trello user session's viewed board id or status; call when user activity or board focus changes.\"\"",
        "parameters": {
          "id_session": "str (required) - The ID of the session to update.",
          "id_board": "str | None (required) - The ID of the board the user is viewing.",
          "status": "str | None (required) - The status of the session."
        }
      },
      {
        "name": "TRELLO_UPDATE_SESSIONS_STATUS_BY_ID_SESSION",
        "description": "Update session status by ID. Updates the status of an existing trello session.\", ) def TRELLO_UPDATE_SESSIONS_STATUS_BY_ID_SESSION( id_session: Annotated[str, \"The ID of the session to update the status for.\"], value: Annotated[str | None, \"The new status for the session.\"] = None ): \"\"\"Update session status by ID. Updates the status of an existing trello session.\"\"",
        "parameters": {
          "id_session": "str (required) - The ID of the session to update the status for.",
          "value": "str | None (required) - The new status for the session."
        }
      },
      {
        "name": "TRELLO_UPDATE_TOKENS_WEBHOOKS_BY_TOKEN",
        "description": "Update a token's webhook. Updates an existing webhook's description, callback url, or monitored trello model id. Note: This function requires a webhook ID since the token-based webhook lookup is not available in the Trello API.\", ) def TRELLO_UPDATE_TOKENS_WEBHOOKS_BY_TOKEN( webhook_id: Annotated[str, \"The ID of the webhook to update.\"], callbackURL: Annotated[str | None, \"The new callback URL for the webhook.\"] = None, description: Annotated[str | None, \"The new description for the webhook.\"] = None, id_model: Annotated[str | None, \"The new model ID to monitor (board, card, etc.).\"] = None ): \"\"\"Update a token's webhook. Updates an existing webhook's description, callback url, or monitored trello model id. Note: This function requires a webhook ID since the token-based webhook lookup is not available in the Trello API.\"\"",
        "parameters": {
          "webhook_id": "str (required) - The ID of the webhook to update.",
          "callbackURL": "str | None (required) - The new callback URL for the webhook.",
          "description": "str | None (required) - The new description for the webhook.",
          "id_model": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS",
        "description": "Update webhooks. Updates an existing trello webhook's description, active status, callback url, or monitored model id; requires the webhook id (not in request body) to be specified, typically via url path.\", ) def TRELLO_UPDATE_WEBHOOKS( active: Annotated[str | None, \"Whether the webhook is active ('true' or 'false').\"] = None, callbackURL: Annotated[str | None, \"The new callback URL for the webhook.\"] = None, description: Annotated[str | None, \"The new description for the webhook.\"] = None, id_model: Annotated[str | None, \"The new model ID to monitor (board, card, etc.).\"] = None ): \"\"\"Update webhooks. Updates an existing trello webhook's description, active status, callback url, or monitored model id; requires the webhook id (not in request body) to be specified, typically via url path.\"\"",
        "parameters": {
          "active": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS_ACTIVE_BY_ID_WEBHOOK",
        "description": "Update webhook active status. Updates the active status ('true' or 'false') of an existing trello webhook specified by `idwebhook`, without affecting other properties.\", ) def TRELLO_UPDATE_WEBHOOKS_ACTIVE_BY_ID_WEBHOOK( id_webhook: Annotated[str, \"The ID of the webhook to update the active status for.\"], value: Annotated[str | None, \"The new active status ('true' or 'false').\"] = None ): \"\"\"Update webhook active status. Updates the active status ('true' or 'false') of an existing trello webhook specified by `idwebhook`, without affecting other properties.\"\"",
        "parameters": {
          "id_webhook": "str (required) - The ID of the webhook to update the active status for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_ADD_SESSIONS",
        "description": "Create new session. Note: Trello session management functionality is not available through the official API. This tool provides information about alternatives for user activity tracking.\", ) def TRELLO_ADD_SESSIONS( id_board: Annotated[str | None, \"The ID of the board to link the session to (for reference only).\"] = None, status: Annotated[str | None, \"The status of the session (for reference only).\"] = None ): \"\"\"Create new session. Note: Trello session management functionality is not available through the official API. This tool provides information about alternatives for user activity tracking.\"\"",
        "parameters": {
          "id_board": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS_BY_ID_WEBHOOK",
        "description": "Update webhook configuration. Updates an existing trello webhook's configuration, avoiding the need to delete and recreate it for modifications.\", ) def TRELLO_UPDATE_WEBHOOKS_BY_ID_WEBHOOK( id_webhook: Annotated[str, \"The ID of the webhook to update.\"], active: Annotated[str | None, \"Whether the webhook is active ('true' or 'false').\"] = None, callbackURL: Annotated[str | None, \"The new callback URL for the webhook.\"] = None, description: Annotated[str | None, \"The new description for the webhook.\"] = None, id_model: Annotated[str | None, \"The new model ID to monitor (board, card, etc.).\"] = None ): \"\"\"Update webhook configuration. Updates an existing trello webhook's configuration, avoiding the need to delete and recreate it for modifications.\"\"",
        "parameters": {
          "id_webhook": "str (required) - The ID of the webhook to update.",
          "active": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS_CALLBACK_URLBY_ID_WEBHOOK",
        "description": "Update webhook callback url. Updates the callback url for a specific trello webhook; other webhook attributes remain unchanged.\", ) def TRELLO_UPDATE_WEBHOOKS_CALLBACK_URLBY_ID_WEBHOOK( id_webhook: Annotated[str, \"The ID of the webhook to update the callback URL for.\"], value: Annotated[str, \"The new callback URL for the webhook.\"] ): \"\"\"Update webhook callback url. Updates the callback url for a specific trello webhook; other webhook attributes remain unchanged.\"\"",
        "parameters": {
          "id_webhook": "str (required) - The ID of the webhook to update the callback URL for.",
          "value": "str (required) - The new callback URL for the webhook."
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS_DESCRIPTION_BY_ID_WEBHOOK",
        "description": "Update webhook description. Updates the description of an existing trello webhook; an empty string for the new description removes the current one.\", ) def TRELLO_UPDATE_WEBHOOKS_DESCRIPTION_BY_ID_WEBHOOK( id_webhook: Annotated[str, \"The ID of the webhook to update the description for.\"], value: Annotated[str | None, \"The new description for the webhook (empty string to remove).\"] = None ): \"\"\"Update webhook description. Updates the description of an existing trello webhook; an empty string for the new description removes the current one.\"\"",
        "parameters": {
          "id_webhook": "str (required) - The ID of the webhook to update the description for.",
          "value": "Annotated[str | None (required)"
        }
      },
      {
        "name": "TRELLO_UPDATE_WEBHOOKS_ID_MODEL_BY_ID_WEBHOOK",
        "description": "Update webhook idModel. Updates the `idmodel` (the monitored trello entity like a board, list, or card) for an active webhook `idwebhook` to the new model id `value`; other webhook properties are unaffected.\", ) def TRELLO_UPDATE_WEBHOOKS_ID_MODEL_BY_ID_WEBHOOK( id_webhook: Annotated[str, \"The ID of the webhook to update the model ID for.\"], value: Annotated[str, \"The new model ID to monitor (board, card, etc.).\"] ): \"\"\"Update webhook idModel. Updates the `idmodel` (the monitored trello entity like a board, list, or card) for an active webhook `idwebhook` to the new model id `value`; other webhook properties are unaffected.\"\"",
        "parameters": {
          "id_webhook": "str (required) - The ID of the webhook to update the model ID for.",
          "value": "Annotated[str (required)"
        }
      },
      {
        "name": "TRELLO_DELETE_ACTIONS_BY_ID_ACTION",
        "description": "Deletes a specific trello action, such as a `commentcard`, by its id; this is an irreversible operation and only applies to deletable action types, as many (especially system-generated) actions cannot be deleted.\", ) def TRELLO_DELETE_ACTIONS_BY_ID_ACTION( idAction: Annotated[str, \"The ID of the action to delete.\"] ): \"\"\"Delete action by id\"\"",
        "parameters": {
          "idAction": "str (required) - The ID of the action to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_BOARDS_MEMBERS_BY_ID_BOARD_BY_ID_MEMBER",
        "description": "Permanently removes a current member from a trello board, revoking their access; this action is irreversible.\", ) def TRELLO_DELETE_BOARDS_MEMBERS_BY_ID_BOARD_BY_ID_MEMBER( idBoard: Annotated[str, \"The ID of the board to remove the member from.\"], idMember: Annotated[str, \"The ID of the member to remove from the board.\"] ): \"\"\"Delete member from board\"\"",
        "parameters": {
          "idBoard": "str (required) - The ID of the board to remove the member from.",
          "idMember": "str (required) - The ID of the member to remove from the board."
        }
      },
      {
        "name": "TRELLO_DELETE_BOARDS_POWER_UPS_BY_ID_BOARD_BY_POWER_UP",
        "description": "Disables a power-up on a trello board using the board's id and the plugin id of a power-up currently enabled on that board; this action is irreversible and may result in data loss.\", ) def TRELLO_DELETE_BOARDS_POWER_UPS_BY_ID_BOARD_BY_POWER_UP( idBoard: Annotated[str, \"The ID of the board to disable the power-up on.\"], powerUp: Annotated[str, \"The plugin ID of the power-up to disable.\"] ): \"\"\"Delete Power-Up from board\"\"",
        "parameters": {
          "idBoard": "str (required) - The ID of the board to disable the power-up on.",
          "powerUp": "str (required) - The plugin ID of the power-up to disable."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_ACTIONS_COMMENTS_BY_ID_CARD_BY_ID_ACTION",
        "description": "Deletes a specific comment action (identified by `idaction`) from a trello card (identified by `idcard`); this operation is irreversible and only affects comments.\", ) def TRELLO_DELETE_CARDS_ACTIONS_COMMENTS_BY_ID_CARD_BY_ID_ACTION( idAction: Annotated[str, \"The ID of the comment action to delete.\"], idCard: Annotated[str, \"The ID of the card containing the comment.\"] ): \"\"\"Delete card action comment\"\"",
        "parameters": {
          "idAction": "str (required) - The ID of the comment action to delete.",
          "idCard": "str (required) - The ID of the card containing the comment."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_BY_ID_CARD",
        "description": "Permanently deletes an archived trello card specified by its `idcard`.\", ) def TRELLO_DELETE_CARDS_BY_ID_CARD( idCard: Annotated[str, \"The ID of the card to delete.\"] ): \"\"\"Delete card by ID\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_CHECKLISTS_BY_ID_CARD_BY_ID_CHECKLIST",
        "description": "Permanently deletes a specific checklist from a trello card.\", ) def TRELLO_DELETE_CARDS_CHECKLISTS_BY_ID_CARD_BY_ID_CHECKLIST( idCard: Annotated[str, \"The ID of the card containing the checklist.\"], idChecklist: Annotated[str, \"The ID of the checklist to delete.\"] ): \"\"\"Delete card checklist\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card containing the checklist.",
          "idChecklist": "str (required) - The ID of the checklist to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_ID_LABELS_BY_ID_CARD_BY_ID_LABEL",
        "description": "Removes a specific label from a trello card; the label itself is not deleted from the board, only its association with the card.\", ) def TRELLO_DELETE_CARDS_ID_LABELS_BY_ID_CARD_BY_ID_LABEL( idCard: Annotated[str, \"The ID of the card to remove the label from.\"], idLabel: Annotated[str, \"The ID of the label to remove from the card.\"] ): \"\"\"Remove label from card\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to remove the label from.",
          "idLabel": "str (required) - The ID of the label to remove from the card."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_ID_MEMBERS_BY_ID_CARD_BY_ID_MEMBER",
        "description": "Removes a currently assigned member from a trello card, affecting only the card's member list and not the member's board membership or overall permissions.\", ) def TRELLO_DELETE_CARDS_ID_MEMBERS_BY_ID_CARD_BY_ID_MEMBER( idCard: Annotated[str, \"The ID of the card to remove the member from.\"], idMember: Annotated[str, \"The ID of the member to remove from the card.\"] ): \"\"\"Remove member from card\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to remove the member from.",
          "idMember": "str (required) - The ID of the member to remove from the card."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_LABELS_BY_ID_CARD_BY_COLOR",
        "description": "Permanently removes a specific `color` label from an existing trello card identified by `idcard`, if the card has that label; this only disassociates the label from the card, not deleting the label definition itself.\", ) def TRELLO_DELETE_CARDS_LABELS_BY_ID_CARD_BY_COLOR( idCard: Annotated[str, \"The ID of the card to remove the label from.\"], color: Annotated[str, \"The color of the label to remove from the card.\"] ): \"\"\"Delete card label by color\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to remove the label from.",
          "color": "str (required) - The color of the label to remove from the card."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_MEMBERS_VOTED_BY_ID_CARD_BY_ID_MEMBER",
        "description": "Removes a member's vote from a trello card; this operation is irreversible and does not confirm if the vote existed prior to removal.\", ) def TRELLO_DELETE_CARDS_MEMBERS_VOTED_BY_ID_CARD_BY_ID_MEMBER( idCard: Annotated[str, \"The ID of the card to remove the vote from.\"], idMember: Annotated[str, \"The ID of the member whose vote to remove.\"] ): \"\"\"Delete member vote from card\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to remove the vote from.",
          "idMember": "str (required) - The ID of the member whose vote to remove."
        }
      },
      {
        "name": "TRELLO_DELETE_CARDS_STICKERS_BY_ID_CARD_BY_ID_STICKER",
        "description": "Permanently removes a specific sticker (identified by `idsticker`) from a trello card (identified by `idcard`).\", ) def TRELLO_DELETE_CARDS_STICKERS_BY_ID_CARD_BY_ID_STICKER( idCard: Annotated[str, \"The ID of the card to remove the sticker from.\"], idSticker: Annotated[str, \"The ID of the sticker to remove from the card.\"] ): \"\"\"Delete card sticker\"\"",
        "parameters": {
          "idCard": "str (required) - The ID of the card to remove the sticker from.",
          "idSticker": "str (required) - The ID of the sticker to remove from the card."
        }
      },
      {
        "name": "TRELLO_DELETE_CHECKLIST_ITEM",
        "description": "Permanently deletes a specific check item from a checklist on a trello card; this operation is irreversible and only affects the specified item, not the entire checklist.",
        "parameters": {
          "idCheckItem": "str (required) - The ID of the checklist item to delete.",
          "idChecklist": "str (required) - The ID of the checklist containing the item."
        }
      },
      {
        "name": "TRELLO_DELETE_CHECKLISTS_BY_ID_CHECKLIST",
        "description": "Permanently and irreversibly deletes a trello checklist and all its items using the `idchecklist`.",
        "parameters": {
          "idChecklist": "str (required) - The ID of the checklist to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_LABELS_BY_ID_LABEL",
        "description": "Permanently deletes an existing label from a trello board by its id; this operation is irreversible via the api.",
        "parameters": {
          "idLabel": "str (required) - The ID of the label to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_MEMBER_BOARD_BACKGROUND",
        "description": "Permanently deletes a specific custom board background belonging to the specified trello member; this operation cannot be undone.",
        "parameters": {
          "idBoardBackground": "str (required) - The ID of the board background to delete.",
          "idMember": "str (required) - The ID of the member who owns the board background."
        }
      },
      {
        "name": "TRELLO_DELETE_MEMBER_CUSTOM_STICKER",
        "description": "Deletes a custom sticker from a trello member's collection; this permanent action is only available for custom stickers within a trello workspace on a paid plan.",
        "parameters": {
          "idCustomSticker": "str (required) - The ID of the custom sticker to delete.",
          "idMember": "str (required) - The ID of the member who owns the custom sticker."
        }
      },
      {
        "name": "TRELLO_DELETE_MEMBER_SAVED_SEARCH",
        "description": "Permanently deletes a specific saved search for a trello member, used when the search is outdated or no longer needed.",
        "parameters": {
          "idMember": "str (required) - The ID of the member who owns the saved search.",
          "idSavedSearch": "str (required) - The ID of the saved search to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_MEMBERS_BOARD_STARS_BY_ID_MEMBER_BY_ID_BOARD_STAR",
        "description": "Removes a specific starred board (identified by `idboardstar`) from a trello member's (identified by `idmember`) list of favorites; `idboardstar` must be an existing star for that member.",
        "parameters": {
          "idMember": "str (required) - The ID of the member who owns the board star.",
          "idBoardStar": "str (required) - The ID of the board star to remove."
        }
      },
      {
        "name": "TRELLO_DELETE_ORGANIZATIONS_BY_ID_ORG",
        "description": "Permanently deletes a trello organization and all its associated data; this action is irreversible and requires caution.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_ORGANIZATIONS_LOGO_BY_ID_ORG",
        "description": "Deletes an existing trello organization's custom logo, restoring its default and leaving other settings unchanged; if no custom logo exists, it succeeds without effect.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization whose logo to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_ORGANIZATIONS_MEMBERS_ALL_BY_ID_ORG_BY_ID_MEMBER",
        "description": "Removes a member entirely from a specific trello organization, including from all its boards and cards; this action is permanent and does not delete the member's trello account.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization to remove the member from.",
          "idMember": "str (required) - The ID of the member to remove from the organization."
        }
      },
      {
        "name": "TRELLO_DELETE_ORGANIZATIONS_MEMBERS_BY_ID_ORG_BY_ID_MEMBER",
        "description": "Permanently removes a member from a trello organization by id, revoking all access to its content; re-invitation is required for renewed access, and this does not delete the member's trello account.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization to remove the member from.",
          "idMember": "str (required) - The ID of the member to remove from the organization."
        }
      },
      {
        "name": "TRELLO_DELETE_ORGANIZATIONS_PREFS_ORG_INVITE_RESTRICT_BY_ID_ORG",
        "description": "Checks organization invite restrictions and provides information about them. Note: orgInviteRestrict parameter has API limitations and may need to be managed via Trello web interface.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization to remove invite restriction from.",
          "value": "str (required) - The email domain restriction value to remove."
        }
      },
      {
        "name": "TRELLO_DELETE_ORG_ASSOCIATED_DOMAIN",
        "description": "Clears the associated email domain from a trello organization's preferences by setting it to empty string, effectively removing email domain restrictions for workspace membership.",
        "parameters": {
          "idOrg": "str (required) - The ID of the organization to remove the associated domain from."
        }
      },
      {
        "name": "TRELLO_DELETE_TOKENS_BY_TOKEN",
        "description": "Deletes a specific trello api token, identified by its value in the path, permanently revoking its access; this action is irreversible and used to invalidate compromised or unneeded tokens.",
        "parameters": {}
      },
      {
        "name": "TRELLO_DELETE_TOKENS_WEBHOOKS_BY_TOKEN_BY_ID_WEBHOOK",
        "description": "Deletes an existing webhook, specified by its `idwebhook`, thereby stopping its notifications.",
        "parameters": {
          "idWebhook": "str (required) - The ID of the webhook to delete."
        }
      },
      {
        "name": "TRELLO_DELETE_WEBHOOKS_BY_ID_WEBHOOK",
        "description": "Permanently deletes an existing trello webhook by its `idwebhook`, an irreversible action that stops future notifications.",
        "parameters": {
          "idWebhook": "str (required) - The ID of the webhook to delete."
        }
      },
      {
        "name": "TRELLO_DISMISS_MEMBER_MESSAGE",
        "description": "Dismisses a specific one-time message for an existing trello member, preventing it from being displayed again.",
        "parameters": {
          "idMember": "str (required) - The ID of the member to dismiss the message for.",
          "value": "str (required) - The value/identifier of the message to dismiss."
        }
      }
    ],
    "total_tools": 317,
    "categories": [
      "Board Management",
      "Card Operations",
      "List Management",
      "Checklist Management",
      "Label Management",
      "Member Management",
      "Action Tracking",
      "Notification Processing",
      "Organization Management",
      "Webhook Management",
      "Search and Filtering",
      "Board Preferences",
      "Session Management",
      "File Attachments",
      "Comments and Activities",
      "Power-ups and Integrations",
      "Custom Fields",
      "Stickers and Emojis",
      "Backgrounds and Themes",
      "Calendar Integration",
      "Email Integration",
      "Advanced Analytics"
    ],
    "key_features": [
      "Complete Trello API coverage with 317 tools",
      "Natural language project management",
      "Real-time webhook support",
      "Advanced search and filtering",
      "Team collaboration tools",
      "Workflow automation",
      "Custom field management",
      "Power-up integrations",
      "Comprehensive board customization",
      "Member permission management",
      "Action history tracking",
      "Notification management"
    ]
  }
}